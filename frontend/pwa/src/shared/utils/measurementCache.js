// Pattern 2: Measurement Cache - —Ö—Ä–∞–Ω–∏–º –∏–∑–º–µ—Ä–µ–Ω–Ω—ã–µ –≤—ã—Å–æ—Ç—ã –Ω–∞–≤—Å–µ–≥–¥–∞
class MeasurementCache {
  constructor() {
    this.cache = new Map(); // { messageId: height }
    this.contentHashes = new Map(); // { messageId: contentHash } –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  }

  // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π hash —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  getContentHash(message) {
    const content = (message.text || message.content || '') + 
                    (message.username || '') + 
                    (message.isQuestion ? '?q?' : '');
    return content.length; // –ü—Ä–æ—Å—Ç–æ–π hash –ø–æ –¥–ª–∏–Ω–µ
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—ã—Å–æ—Ç—É –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∏–∑–º–µ—Ä–∏—Ç—å
  getHeight(message, element) {
    if (!message || !message.id) return null;

    const contentHash = this.getContentHash(message);
    const cachedHash = this.contentHashes.get(message.id);
    
    // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω—É–∂–Ω–æ –∏–∑–º–µ—Ä–∏—Ç—å –∑–∞–Ω–æ–≤–æ
    if (cachedHash && cachedHash !== contentHash) {
      console.log(`üìê Content changed for message ${message.id}, re-measuring...`);
      this.cache.delete(message.id);
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤ –∫—ç—à–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    if (this.cache.has(message.id)) {
      return this.cache.get(message.id);
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è
    if (element && element.offsetHeight > 0) {
      const height = element.offsetHeight;
      this.cache.set(message.id, height);
      this.contentHashes.set(message.id, contentHash);
      console.log(`üìè Measured and cached: ${message.id} = ${height}px`);
      return height;
    }

    return null;
  }

  // –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã—Å–æ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ smart estimation)
  setHeight(messageId, height, contentHash = null) {
    this.cache.set(messageId, height);
    if (contentHash !== null) {
      this.contentHashes.set(messageId, contentHash);
    }
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  clear(messageId) {
    this.cache.delete(messageId);
    this.contentHashes.delete(messageId);
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à
  clearAll() {
    this.cache.clear();
    this.contentHashes.clear();
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
  getStats() {
    return {
      size: this.cache.size,
      totalHeight: Array.from(this.cache.values()).reduce((sum, h) => sum + h, 0),
      avgHeight: this.cache.size > 0 
        ? Array.from(this.cache.values()).reduce((sum, h) => sum + h, 0) / this.cache.size 
        : 0
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const measurementCache = new MeasurementCache();

export default measurementCache;

