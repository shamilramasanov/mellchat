// frontend/pwa/src/shared/services/dateMessagesService.js
class DateMessagesService {
  constructor() {
    this.API_BASE_URL = '/api/v1';
  }

  async request(endpoint, options = {}) {
    const url = `${this.API_BASE_URL}${endpoint}`;
    console.log('üåê Making date messages request to:', url);
    
    const config = {
      headers: {
        'Content-Type': 'application/json',
        'Cache-Control': 'no-cache',
        ...options.headers,
      },
      ...options,
    };

    try {
      console.log('üì§ Date messages request config:', config);
      const response = await fetch(url, config);
      console.log('üì• Date messages response status:', response.status);
      
      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || `HTTP error! status: ${response.status}`);
      }

      return data;
    } catch (error) {
      console.error('Date Messages API request failed:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
   * @param {string} streamId - ID —Å—Ç—Ä–∏–º–∞
   * @param {string} date - –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
   * @param {number} offset - –°–º–µ—â–µ–Ω–∏–µ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
   * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)
   */
  async getMessagesByDate(streamId, date, offset = 0, limit = 20) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ISO –¥–∞—Ç—É –≤ –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
    let formattedDate = date;
    if (date && date.includes('T')) {
      formattedDate = date.split('T')[0];
    }
    
    const params = new URLSearchParams({
      date: formattedDate,
      offset: offset.toString(),
      limit: limit.toString()
    });
    
    return this.request(`/date-messages/${streamId}?${params.toString()}`);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è —Å—Ç—Ä–∏–º–∞
   * @param {string} streamId - ID —Å—Ç—Ä–∏–º–∞
   */
  async getAvailableDates(streamId) {
    return this.request(`/date-messages/${streamId}/available-dates`);
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param {string} dateString - –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
   */
  formatDateForDisplay(dateString) {
    const date = new Date(dateString);
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–µ–≥–æ–¥–Ω—è –ª–∏ —ç—Ç–æ
    if (date.toDateString() === today.toDateString()) {
      return '–°–µ–≥–æ–¥–Ω—è';
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—á–µ—Ä–∞ –ª–∏ —ç—Ç–æ
    if (date.toDateString() === yesterday.toDateString()) {
      return '–í—á–µ—Ä–∞';
    }

    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–∞—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ "DD.MM"
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    return `${day}.${month}`;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
   * @param {string[]} availableDates - –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç
   * @param {string} currentDate - –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è)
   */
  getNextDateToLoad(availableDates, currentDate) {
    if (!availableDates || availableDates.length === 0) {
      return null;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    const sortedDates = [...availableDates].sort((a, b) => new Date(b) - new Date(a));
    
    if (!currentDate) {
      // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É
      // –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–∫—Ä—ã–ª —Å—Ç—Ä–∏–º –∏ —Ö–æ—á–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      return sortedDates[sortedDates.length - 1];
    }

    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    const currentIndex = sortedDates.findIndex(date => date === currentDate);
    
    if (currentIndex === -1 || currentIndex === sortedDates.length - 1) {
      // –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
      return null;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é (–±–æ–ª–µ–µ —Å—Ç–∞—Ä—É—é) –¥–∞—Ç—É
    return sortedDates[currentIndex + 1];
  }
}

export const dateMessagesService = new DateMessagesService();
export default dateMessagesService;
