import React, { useEffect, useState } from 'react';
import { useTranslation } from 'react-i18next';
import useAdminStore from '../../store/adminStore';
import './System.css';

const System = () => {
  const { t } = useTranslation();
  const {
    fetchConnections,
    disconnectConnection,
    fetchConnectedUsers,
    fetchBlockedUsers,
    blockUser,
    unblockUser,
    blockedUsers
  } = useAdminStore();

  const [connections, setConnections] = useState([]);
  const [connectedUsers, setConnectedUsers] = useState([]);
  const [loading, setLoading] = useState(false);
  const [blockReason, setBlockReason] = useState('');
  const [blockingUserId, setBlockingUserId] = useState(null);

  useEffect(() => {
    loadData();
    const interval = setInterval(loadData, 10000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    return () => clearInterval(interval);
  }, []);

  const loadData = async () => {
    setLoading(true);
    try {
      const [connResult, usersResult] = await Promise.all([
        fetchConnections(),
        fetchConnectedUsers()
      ]);

      if (connResult.success) {
        setConnections(connResult.connections || []);
      }
      if (usersResult.success) {
        setConnectedUsers(usersResult.users || []);
      }
    } catch (error) {
      console.error('Error loading data:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleDisconnect = async (connectionId) => {
    if (!confirm(`–û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ${connectionId}?`)) return;

    const result = await disconnectConnection(connectionId);
    if (result.success) {
      await loadData();
      alert('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ');
    } else {
      alert(`–û—à–∏–±–∫–∞: ${result.error}`);
    }
  };

  const handleBlockUser = async (userId) => {
    if (!blockReason.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏');
      return;
    }

    const result = await blockUser(userId, blockReason);
    if (result.success) {
      await loadData();
      await fetchBlockedUsers();
      setBlockReason('');
      setBlockingUserId(null);
      alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
    } else {
      alert(`–û—à–∏–±–∫–∞: ${result.error}`);
    }
  };

  const handleUnblockUser = async (userId) => {
    if (!confirm(`–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}?`)) return;

    const result = await unblockUser(userId);
    if (result.success) {
      await loadData();
      await fetchBlockedUsers();
      alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
    } else {
      alert(`–û—à–∏–±–∫–∞: ${result.error}`);
    }
  };

  return (
    <div className="admin-system">
      <div className="admin-system__header">
        <h1>‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π</h1>
        <button onClick={loadData} disabled={loading}>
          {loading ? 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å'}
        </button>
      </div>

      {/* –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
      <section className="admin-system__section">
        <h2>üîå –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ({connections.length})</h2>
        <div className="admin-system__table-container">
          <table className="admin-system__table">
            <thead>
              <tr>
                <th>Connection ID</th>
                <th>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞</th>
                <th>–ö–∞–Ω–∞–ª</th>
                <th>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏</th>
                <th>–°–æ–æ–±—â–µ–Ω–∏–π</th>
                <th>–ü–æ–¥–∫–ª—é—á–µ–Ω</th>
                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
              </tr>
            </thead>
            <tbody>
              {connections.length === 0 ? (
                <tr>
                  <td colSpan="7" style={{ textAlign: 'center', padding: '20px' }}>
                    –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
                  </td>
                </tr>
              ) : (
                connections.map((conn) => (
                  <tr key={conn.connectionId}>
                    <td>
                      <code style={{ fontSize: '12px' }}>{conn.connectionId}</code>
                    </td>
                    <td>
                      <span className={`platform-badge platform-badge--${conn.platform}`}>
                        {conn.platform}
                      </span>
                    </td>
                    <td>{conn.channel}</td>
                    <td>{conn.subscribers || 0}</td>
                    <td>{conn.messageCount || 0}</td>
                    <td>
                      {conn.connectedAt
                        ? new Date(conn.connectedAt).toLocaleString('ru-RU')
                        : '-'}
                    </td>
                    <td>
                      <button
                        onClick={() => handleDisconnect(conn.connectionId)}
                        className="btn-danger"
                        title="–û—Ç–∫–ª—é—á–∏—Ç—å"
                      >
                        üîå –û—Ç–∫–ª—é—á–∏—Ç—å
                      </button>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </section>

      {/* –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ */}
      <section className="admin-system__section">
        <h2>üë• –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({connectedUsers.length})</h2>
        <div className="admin-system__table-container">
          <table className="admin-system__table">
            <thead>
              <tr>
                <th>User ID</th>
                <th>IP</th>
                <th>User Agent</th>
                <th>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–π</th>
                <th>–°—Ç–∞—Ç—É—Å</th>
                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
              </tr>
            </thead>
            <tbody>
              {connectedUsers.length === 0 ? (
                <tr>
                  <td colSpan="6" style={{ textAlign: 'center', padding: '20px' }}>
                    –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                  </td>
                </tr>
              ) : (
                connectedUsers.map((user) => (
                  <tr key={user.userId}>
                    <td>
                      <code>{user.userId}</code>
                    </td>
                    <td>{user.ip}</td>
                    <td style={{ fontSize: '12px', maxWidth: '200px', overflow: 'hidden', textOverflow: 'ellipsis' }}>
                      {user.userAgent}
                    </td>
                    <td>{user.connectionIds?.length || 0}</td>
                    <td>
                      {user.isBlocked ? (
                        <span className="status-badge status-badge--blocked">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</span>
                      ) : (
                        <span className="status-badge status-badge--active">–ê–∫—Ç–∏–≤–µ–Ω</span>
                      )}
                    </td>
                    <td>
                      {user.isBlocked ? (
                        <button
                          onClick={() => handleUnblockUser(user.userId)}
                          className="btn-success"
                        >
                          ‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
                        </button>
                      ) : (
                        <>
                          {blockingUserId === user.userId ? (
                            <div style={{ display: 'flex', gap: '5px', alignItems: 'center' }}>
                              <input
                                type="text"
                                placeholder="–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"
                                value={blockReason}
                                onChange={(e) => setBlockReason(e.target.value)}
                                style={{ padding: '5px', fontSize: '12px' }}
                                onKeyPress={(e) => e.key === 'Enter' && handleBlockUser(user.userId)}
                              />
                              <button
                                onClick={() => handleBlockUser(user.userId)}
                                className="btn-danger"
                                style={{ padding: '5px 10px' }}
                              >
                                üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
                              </button>
                              <button
                                onClick={() => {
                                  setBlockingUserId(null);
                                  setBlockReason('');
                                }}
                                style={{ padding: '5px' }}
                              >
                                ‚úñÔ∏è
                              </button>
                            </div>
                          ) : (
                            <button
                              onClick={() => setBlockingUserId(user.userId)}
                              className="btn-danger"
                            >
                              üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
                            </button>
                          )}
                        </>
                      )}
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </section>

      {/* –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ */}
      <section className="admin-system__section">
        <h2>üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({blockedUsers.length})</h2>
        <button onClick={fetchBlockedUsers} style={{ marginBottom: '10px' }}>
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
        </button>
        <div className="admin-system__table-container">
          <table className="admin-system__table">
            <thead>
              <tr>
                <th>User ID</th>
                <th>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</th>
                <th>–ü—Ä–∏—á–∏–Ω–∞</th>
                <th>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª</th>
                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
              </tr>
            </thead>
            <tbody>
              {blockedUsers.length === 0 ? (
                <tr>
                  <td colSpan="5" style={{ textAlign: 'center', padding: '20px' }}>
                    –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                  </td>
                </tr>
              ) : (
                blockedUsers.map((user) => (
                  <tr key={user.userId}>
                    <td>
                      <code>{user.userId}</code>
                    </td>
                    <td>
                      {new Date(user.blockedAt).toLocaleString('ru-RU')}
                    </td>
                    <td>{user.reason}</td>
                    <td>{user.blockedBy}</td>
                    <td>
                      <button
                        onClick={() => handleUnblockUser(user.userId)}
                        className="btn-success"
                      >
                        ‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
                      </button>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </section>
    </div>
  );
};

export default System;
