import { useState, useRef, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import toast from 'react-hot-toast';
// import { Modal, Input, Button, GlassCard } from '@shared/components'; // –£–¥–∞–ª–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å glass —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
import { useStreamsStore } from '../store/streamsStore';
import { useChatStore } from '@features/chat/store/chatStore';
import { streamsAPI } from '@shared/services';
import { isValidStreamURL } from '@shared/utils/validators';
import { detectPlatform } from '@shared/utils/helpers';
import { PLATFORM_LOGOS, PLATFORMS } from '@shared/utils/constants';
import './AddStreamModal.css';

const AddStreamModal = ({ isOpen, onClose }) => {
  const { t } = useTranslation();
  const [url, setUrl] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [pasteSuggested, setPasteSuggested] = useState(false);
  const inputRef = useRef(null);
  
  const addStream = useStreamsStore((state) => state.addStream);
  const createStreamFromURL = useStreamsStore((state) => state.createStreamFromURL);
  const getStreamStats = useChatStore((state) => state.getStreamStats);

  const platform = url ? detectPlatform(url) : null;

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ –ø–æ–ª–µ
  const handleInputFocus = async () => {
    if (url.trim()) return; // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    
    try {
      // –ß–∏—Ç–∞–µ–º –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (—Ç—Ä–µ–±—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ)
      const clipboardText = await navigator.clipboard.readText();
      
      if (clipboardText && isValidStreamURL(clipboardText.trim())) {
        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É
        setPasteSuggested(true);
      }
    } catch (error) {
      // Clipboard API –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –±—Ä–∞—É–∑–µ—Ä–∞)
      // –ò–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–∞–ª —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
      // –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
    }
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—Å—Ç–∞–≤–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏
  const handlePasteSuggested = () => {
    navigator.clipboard.readText().then(text => {
      if (text && isValidStreamURL(text.trim())) {
        setUrl(text.trim());
        setPasteSuggested(false);
      }
    }).catch(() => {});
  };

  // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ URL
  useEffect(() => {
    if (url.trim() && pasteSuggested) {
      setPasteSuggested(false);
    }
  }, [url, pasteSuggested]);

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏/–∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏
  useEffect(() => {
    if (!isOpen) {
      setUrl('');
      setPasteSuggested(false);
    } else {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
      setTimeout(() => {
        inputRef.current?.focus();
      }, 100);
    }
  }, [isOpen]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è URL –∏–∑ –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞ –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  const createStreamURL = (authorName, platform) => {
    const cleanName = authorName.trim().toLowerCase();
    switch (platform) {
      case PLATFORMS.TWITCH:
        return `https://www.twitch.tv/${cleanName}`;
      case PLATFORMS.YOUTUBE:
        // –î–ª—è YouTube –∏–º—è –∞–≤—Ç–æ—Ä–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫ –∂–µ, –Ω—É–∂–µ–Ω videoId –∏–ª–∏ channel
        // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è –∞–≤—Ç–æ—Ä–∞, backend –ø–æ–ø—Ä–æ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        return cleanName;
      case PLATFORMS.KICK:
        return `https://kick.com/${cleanName}`;
      default:
        return null;
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –∏–º–µ–Ω–µ–º –∞–≤—Ç–æ—Ä–∞ (–Ω–µ URL)
  const isAuthorName = (input) => {
    const trimmed = input.trim();
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π URL –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∏–º–µ–Ω–∏
    return !isValidStreamURL(trimmed) && /^[a-zA-Z0-9_-]+$/.test(trimmed);
  };

  const handleConnect = async () => {
    const inputValue = url.trim();
    
    // –ï—Å–ª–∏ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π URL —Å—Ç—Ä–∏–º–∞ - –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫–∞–∫ –æ–±—ã—á–Ω–æ
    if (isValidStreamURL(inputValue)) {
      setIsLoading(true);
      try {
        const response = await streamsAPI.connect(inputValue);
        
        const stream = createStreamFromURL(inputValue);
        if (stream && response?.connection) {
          const streamData = { 
            ...stream, 
            connectionId: response.connection.id,
            status: 'connected',
            connectedAt: response.connection.connectedAt,
            viewers: response.connection.viewers || 0,
            title: response.connection.title || stream.title,
            author: response.connection.channel || stream.streamId,
          };
          
          addStream(streamData);
          toast.success(t('common.success'));
          setUrl('');
          onClose();
        }
      } catch (error) {
        console.error('‚ùå Stream connect error:', error);
        toast.error(t('errors.connectionFailed'));
      } finally {
        setIsLoading(false);
      }
      return;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –∏–º—è –∞–≤—Ç–æ—Ä–∞ - –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫–æ –≤—Å–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
    if (isAuthorName(inputValue)) {
      setIsLoading(true);
      const authorName = inputValue;
      const platforms = [PLATFORMS.TWITCH, PLATFORMS.KICK]; // YouTube —Ç—Ä–µ–±—É–µ—Ç videoId, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      const connectedPlatforms = [];

      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫–æ –≤—Å–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const connectionPromises = platforms.map(async (platform) => {
          try {
            const streamUrl = createStreamURL(authorName, platform);
            if (!streamUrl) return null;
            
            const response = await streamsAPI.connect(streamUrl);
            if (response?.connection) {
              const stream = createStreamFromURL(streamUrl);
              if (stream) {
                return {
                  platform,
                  stream: {
                    ...stream,
                    connectionId: response.connection.id,
                    status: 'connected',
                    connectedAt: response.connection.connectedAt,
                    viewers: response.connection.viewers || 0,
                    title: response.connection.title || stream.title,
                    author: response.connection.channel || stream.streamId,
                  }
                };
              }
            }
          } catch (error) {
            console.log(`‚ö†Ô∏è Failed to connect to ${platform}:`, error.message);
            return null;
          }
        });

        const results = await Promise.all(connectionPromises);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∏–º—ã
        results.forEach((result) => {
          if (result && result.stream) {
            addStream(result.stream);
            connectedPlatforms.push(result.platform);
          }
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (connectedPlatforms.length > 0) {
          toast.success(`–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –Ω–∞ ${connectedPlatforms.length} –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö: ${connectedPlatforms.join(', ')}`);
          setUrl('');
          onClose();
        } else {
          toast.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ "${authorName}" –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞.`);
        }
      } catch (error) {
        console.error('‚ùå Multi-platform connect error:', error);
        toast.error(t('errors.connectionFailed'));
      } finally {
        setIsLoading(false);
      }
      return;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π URL –∏ –Ω–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞
    toast.error('–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∏–º –∏–ª–∏ –∏–º—è –∞–≤—Ç–æ—Ä–∞');
  };
  
  if (!isOpen) return null;

  return (
    <>
      {/* Modal Overlay */}
      <div className="add-stream-modal__overlay" onClick={onClose}>
        <div className="add-stream-modal" onClick={(e) => e.stopPropagation()}>
          {/* Modal Header */}
          <div className="add-stream-modal__header">
            <h2 className="add-stream-modal__title">‚ûï {t('streams.add')}</h2>
            <button className="add-stream-modal__close" onClick={onClose}>
              ‚úï
            </button>
          </div>

          {/* Modal Content */}
          <div className="add-stream-modal__content">
            <div className="add-stream-modal__input-container">
              <span className="add-stream-modal__input-icon">üîó</span>
              <input
                ref={inputRef}
                className="add-stream-modal__input"
                placeholder={t('streams.urlPlaceholder')}
                value={url}
                onChange={(e) => setUrl(e.target.value)}
                onFocus={handleInputFocus}
              />
            </div>

            {/* –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ */}
            {pasteSuggested && (
              <div className="add-stream-modal__paste-suggestion">
                <span>üìã –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞</span>
                <button 
                  className="add-stream-modal__paste-button"
                  onClick={handlePasteSuggested}
                >
                  –í—Å—Ç–∞–≤–∏—Ç—å
                </button>
              </div>
            )}

            {platform && (
              <div className="add-stream-modal__platform">
                <img 
                  src={PLATFORM_LOGOS[platform]} 
                  alt={platform}
                  className="add-stream-modal__platform-logo"
                />
                <span className="add-stream-modal__platform-name">
                  {platform}
                </span>
              </div>
            )}

            <div className="add-stream-modal__buttons">
              <button 
                className="add-stream-modal__button add-stream-modal__button--secondary"
                onClick={onClose}
              >
                {t('streams.cancel')}
              </button>
              <button 
                className="add-stream-modal__button add-stream-modal__button--primary"
                onClick={handleConnect}
                disabled={!url || isLoading}
              >
                {isLoading ? '‚è≥' : t('streams.connect')}
              </button>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default AddStreamModal;
