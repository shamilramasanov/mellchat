import { useState, useRef, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import toast from 'react-hot-toast';
// import { Modal, Input, Button, GlassCard } from '@shared/components'; // –£–¥–∞–ª–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å glass —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
import { useStreamsStore } from '../store/streamsStore';
import { isValidStreamURL } from '@shared/utils/validators';
import { detectPlatform } from '@shared/utils/helpers';
import { PLATFORM_LOGOS } from '@shared/utils/constants';
import './AddStreamModal.css';

const AddStreamModal = ({ isOpen, onClose }) => {
  const { t } = useTranslation();
  const [url, setUrl] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const inputRef = useRef(null);
  
  const addStream = useStreamsStore((state) => state.addStream);
  const createStreamFromURL = useStreamsStore((state) => state.createStreamFromURL);

  const platform = url ? detectPlatform(url) : null;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  useEffect(() => {
    if (isOpen && !url) {
      checkClipboardAndAutoPaste();
    }
  }, [isOpen]);


  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—Å—Ç–∞–≤–∫–∞
  const checkClipboardAndAutoPaste = async () => {
    try {
      const clipboardText = await navigator.clipboard.readText();
      if (clipboardText && isValidStreamURL(clipboardText.trim())) {
        setUrl(clipboardText.trim());
        toast.success('üìã –°—Å—ã–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞');
      }
    } catch (error) {
      // Clipboard API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      console.log('Clipboard API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    }
  };


  // –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+V / Cmd+V
  const handleKeyDown = (e) => {
    if ((e.ctrlKey || e.metaKey) && e.key === 'v') {
      // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –≤—Å—Ç–∞–≤–∫—É, –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º
      setTimeout(() => {
        if (url && isValidStreamURL(url)) {
          toast.success('‚úÖ –°—Å—ã–ª–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞!');
        }
      }, 100);
    }
  };

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏/–∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏
  useEffect(() => {
    if (!isOpen) {
      setUrl('');
    } else {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Ñ–æ–∫—É—Å–æ–º
      setTimeout(() => {
        inputRef.current?.focus();
      }, 100);
    }
  }, [isOpen]);



  const handleConnect = async () => {
    if (!isValidStreamURL(url)) {
      toast.error('‚ùå –í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∏–º');
      return;
    }

    setIsLoading(true);
    try {
      const stream = createStreamFromURL(url);
      if (stream) {
        addStream(stream);
        toast.success('‚úÖ –°—Ç—Ä–∏–º —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!');
        setUrl('');
        onClose();
      }
    } catch (error) {
      console.error('‚ùå Stream connect error:', error);
      toast.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å—Ç—Ä–∏–º—É');
    } finally {
      setIsLoading(false);
    }
  };

  // –†—É—á–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ (fallback)
  const handleManualPaste = async () => {
    try {
      const clipboardText = await navigator.clipboard.readText();
      if (clipboardText && isValidStreamURL(clipboardText.trim())) {
        setUrl(clipboardText.trim());
        toast.success('üìã –°—Å—ã–ª–∫–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞');
      } else {
        toast.error('‚ùå –í –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∏–º');
      }
    } catch (error) {
      toast.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±—É—Ñ–µ—Ä—É –æ–±–º–µ–Ω–∞');
    }
  };
  
  if (!isOpen) return null;

  return (
    <>
      {/* Modal Overlay */}
      <div className="add-stream-modal__overlay" onClick={onClose}>
        <div className="add-stream-modal" onClick={(e) => e.stopPropagation()}>
          {/* Modal Header */}
          <div className="add-stream-modal__header">
            <h2 className="add-stream-modal__title">‚ûï {t('streams.add')}</h2>
            <button className="add-stream-modal__close" onClick={onClose}>
              ‚úï
            </button>
          </div>

          {/* Modal Content */}
          <div className="add-stream-modal__content">
            <div className="add-stream-modal__input-container">
              <input
                ref={inputRef}
                className="add-stream-modal__input"
                placeholder="üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∏–º"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
                onKeyDown={handleKeyDown}
              />
            </div>

            {/* Fallback –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ */}
            {!url.trim() && (
              <div className="add-stream-modal__paste-fallback">
                <button 
                  className="add-stream-modal__paste-button"
                  onClick={handleManualPaste}
                >
                  üìã –í—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
                </button>
              </div>
            )}

            {platform && (
              <div className="add-stream-modal__platform">
                <img 
                  src={PLATFORM_LOGOS[platform]} 
                  alt={platform}
                  className="add-stream-modal__platform-logo"
                />
                <span className="add-stream-modal__platform-name">
                  {platform}
                </span>
              </div>
            )}

            <div className="add-stream-modal__buttons">
              <button 
                className="add-stream-modal__button add-stream-modal__button--secondary"
                onClick={onClose}
              >
                {t('streams.cancel')}
              </button>
              <button 
                className="add-stream-modal__button add-stream-modal__button--primary"
                onClick={handleConnect}
                disabled={!isValidStreamURL(url) || isLoading}
              >
                {isLoading ? '‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : t('streams.connect')}
              </button>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default AddStreamModal;
