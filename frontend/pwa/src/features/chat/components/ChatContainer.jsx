import { useTranslation } from 'react-i18next';
import { useEffect, useLayoutEffect, useRef, useState, useCallback, useMemo } from 'react';
import { useChatStore } from '../store/chatStore';
import { useStreamsStore } from '@features/streams/store/streamsStore';
import VirtualizedMessageList from '@shared/components/VirtualizedMessageList';
import SearchBar from './SearchBar';
import { useWebSocketContext } from '@shared/components/WebSocketProvider';
// import DatabaseStatus from './DatabaseStatus'; // –£–±—Ä–∞–ª–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
import { useAdaptiveUpdates, usePerformanceMonitor } from '@shared/hooks/useOptimization';
import deviceDetection from '@shared/utils/deviceDetection';
import './ChatContainer.css';

// –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ —Å–∫—Ä–æ–ª–ª–∞
const ENABLE_SCROLL_LOGS = false;

const THRESHOLD = 120; // px ‚Äî –∫–æ–≥–¥–∞ —Å—á–∏—Ç–∞—Ç—å "–≤–Ω–∏–∑—É"
const SCROLL_RESET_DELAY = 500; // –£–≤–µ–ª–∏—á–∏–ª–∏ —Å 200ms –¥–æ 500ms

const ChatContainer = ({ onAddStream }) => {
  const { t } = useTranslation();

  // === Zustand ===
  const activeStreamId = useStreamsStore((s) => s.activeStreamId);
  const activeStreams = useStreamsStore((s) => s.activeStreams);
  const shouldAutoScroll = useStreamsStore((s) => s.shouldAutoScroll);
  const clearAutoScrollFlag = useStreamsStore((s) => s.clearAutoScrollFlag);
  const setScrollFunctions = useStreamsStore((s) => s.setScrollFunctions);
  const messages = useChatStore((s) => s.messages);
  const markMessagesAsRead = useChatStore((s) => s.markMessagesAsRead);
  const getStreamStats = useChatStore((s) => s.getStreamStats);
  const getStreamMessages = useChatStore((s) => s.getStreamMessages);
  const getFirstUnreadMessageId = useChatStore((s) => s.getFirstUnreadMessageId);
  const getFirstUnreadQuestionId = useChatStore((s) => s.getFirstUnreadQuestionId);
  const setSearchQuery = useChatStore((s) => s.setSearchQuery);
  const searchQuery = useChatStore((s) => s.searchQuery);
  const loadMessagesFromDatabase = useChatStore((s) => s.loadMessagesFromDatabase);
  const loadMessagesAdaptive = useChatStore((s) => s.loadMessagesAdaptive) || (() => Promise.resolve({ success: false }));
  const hasMoreMessages = useChatStore((s) => s.hasMoreMessages) || false;
  const loadMoreMessages = useChatStore((s) => s.loadMoreMessages) || (() => Promise.resolve({ success: false }));
  const loadingStrategy = useChatStore((s) => s.loadingStrategy) || { enablePagination: false };
  const setActiveStreamId = useChatStore((s) => s.setActiveStreamId);
  const clearSearchTimeout = useChatStore((s) => s.clearSearchTimeout);
  const setCurrentMood = useChatStore((s) => s.setCurrentMood);
  const moodEnabled = useChatStore((s) => s.moodEnabled);
  
  // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
  const loadOlderMessages = useChatStore((s) => s.loadOlderMessages);
  const getOldestMessageId = useChatStore((s) => s.getOldestMessageId);

  // === Refs ===
  const containerRef = useRef(null);
  const scrollPositions = useRef({});
  const wasAtBottomRef = useRef(true);
  const isScrollingRef = useRef(false);
  const prevMsgCountRef = useRef(0);
  const prevStreamRef = useRef(null);
  const timeoutRef = useRef(null);
  const lastLoadMoreTimeRef = useRef(0);
  const autoLoadTriggeredRef = useRef(false);
  const lastLoadedMessageIdRef = useRef(null);

  // === State ===
  const [showNewBtn, setShowNewBtn] = useState(false);
  const [newMsgCount, setNewMsgCount] = useState(0);
  const [isAtBottom, setIsAtBottom] = useState(true);
  const [isLoadingMore, setIsLoadingMore] = useState(false);

  // === WebSocket Hook ===
  const { on, off } = useWebSocketContext();
  
  // === –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö—É–∫–∏ ===
  const { measureRender } = usePerformanceMonitor();
  const adaptiveSettings = deviceDetection.getAdaptiveSettings() || {
    animations: { reducedMotion: false },
    updateFrequency: { uiRefresh: 100 }
  };

  // === –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç—Ä–∏–º–∞ ===
  const streamMessages = useMemo(() => {
    if (!activeStreamId) return [];
    const messages = getStreamMessages(activeStreamId);
    return Array.isArray(messages) ? messages : [];
  }, [getStreamMessages, activeStreamId, messages, searchQuery, moodEnabled]);

  const hasMessages = streamMessages.length > 0;
  const hasStreams = activeStreams.length > 0;

  // === –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã ===
  const checkIsAtBottom = useCallback(() => {
    const el = containerRef.current;
    if (!el) return false;
    const { scrollTop, scrollHeight, clientHeight } = el;
    return scrollHeight - scrollTop - clientHeight <= THRESHOLD;
  }, []);

  const saveScroll = useCallback(() => {
    if (activeStreamId && containerRef.current) {
      scrollPositions.current[activeStreamId] = containerRef.current.scrollTop;
    }
  }, [activeStreamId]);

  const scrollToBottom = useCallback((behavior = 'smooth') => {
    const el = containerRef.current;
    if (!el || !hasMessages) return;

    // –ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä—É—á–Ω–æ–º —Å–∫—Ä–æ–ª–ª–µ
    const lastMsg = streamMessages[streamMessages.length - 1];
    if (activeStreamId && lastMsg) {
      markMessagesAsRead(activeStreamId, lastMsg.id);
    }

    // –°–∫—Ä–æ–ª–ª —Å —É—á–µ—Ç–æ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (behavior === 'instant' || adaptiveSettings.animations.reducedMotion) {
      el.scrollTop = el.scrollHeight;
    } else {
      el.scrollTo({ top: el.scrollHeight, behavior: 'smooth' });
    }

    setShowNewBtn(false);
    setNewMsgCount(0);
    setIsAtBottom(true);
    wasAtBottomRef.current = true;
  }, [activeStreamId, streamMessages, hasMessages, markMessagesAsRead, adaptiveSettings.animations.reducedMotion]);

  // –°–∫—Ä–æ–ª–ª –∫ –ø–µ—Ä–≤–æ–º—É –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  const scrollToFirstUnreadMessage = useCallback((streamId, behavior = 'smooth') => {
    if (!streamId) return;
    
    const messageId = getFirstUnreadMessageId(streamId);
    if (!messageId) {
      // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö, —Å–∫—Ä–æ–ª–ª–∏–º –≤ –∫–æ–Ω–µ—Ü
      scrollToBottom(behavior);
      return;
    }

    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã DOM –æ–±–Ω–æ–≤–∏–ª—Å—è
    setTimeout(() => {
      const el = containerRef.current;
      if (!el) return;

      // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ data-message-id
      const messageElement = el.querySelector(`[data-message-id="${messageId}"]`);
      if (messageElement) {
        messageElement.scrollIntoView({ behavior, block: 'center' });
        
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –ø–æ—Å–ª–µ —Å–∫—Ä–æ–ª–ª–∞
        setTimeout(() => {
          markMessagesAsRead(streamId, messageId);
        }, 500);
      } else {
        // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–∫—Ä–æ–ª–ª–∏–º –≤ –∫–æ–Ω–µ—Ü
        scrollToBottom(behavior);
      }
    }, 100);
  }, [getFirstUnreadMessageId, scrollToBottom, markMessagesAsRead]);

  // –°–∫—Ä–æ–ª–ª –∫ –ø–µ—Ä–≤–æ–º—É –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É
  const scrollToFirstUnreadQuestion = useCallback((streamId, behavior = 'smooth') => {
    if (!streamId) return;
    
    const questionId = getFirstUnreadQuestionId(streamId);
    if (!questionId) {
      // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–∫—Ä–æ–ª–ª–∏–º –≤ –∫–æ–Ω–µ—Ü
      scrollToBottom(behavior);
      return;
    }

    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã DOM –æ–±–Ω–æ–≤–∏–ª—Å—è
    setTimeout(() => {
      const el = containerRef.current;
      if (!el) return;

      // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤–æ–ø—Ä–æ—Å–∞ –ø–æ data-message-id
      const questionElement = el.querySelector(`[data-message-id="${questionId}"]`);
      if (questionElement) {
        questionElement.scrollIntoView({ behavior, block: 'center' });
        
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –ø–æ—Å–ª–µ —Å–∫—Ä–æ–ª–ª–∞
        setTimeout(() => {
          markMessagesAsRead(streamId, questionId);
        }, 500);
      } else {
        // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–∫—Ä–æ–ª–ª–∏–º –≤ –∫–æ–Ω–µ—Ü
        scrollToBottom(behavior);
      }
    }, 100);
  }, [getFirstUnreadQuestionId, scrollToBottom, markMessagesAsRead]);

  // –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∞ (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ hasMessages)
  const forceScrollToBottom = useCallback((behavior = 'instant') => {
    const el = containerRef.current;
    if (!el) {
      return; // Ref can be null on first render
    }

    console.log('üöÄ Force scrolling to bottom:', {
      scrollHeight: el.scrollHeight,
      scrollTop: el.scrollTop,
      clientHeight: el.clientHeight,
      behavior,
      messagesCount: streamMessages?.length || 0
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞
    if (el.scrollHeight <= el.clientHeight) {
      console.log('‚ö†Ô∏è No scrollable content, scrollHeight <= clientHeight');
      return;
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä–æ–ª–ª–∏–º –≤ —Å–∞–º—ã–π –Ω–∏–∑
    const targetScrollTop = el.scrollHeight - el.clientHeight;
    
    if (behavior === 'instant') {
      el.scrollTop = targetScrollTop;
    } else {
      el.scrollTo({ top: targetScrollTop, behavior: 'smooth' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    setTimeout(() => {
      console.log('‚úÖ Scroll result:', {
        scrollHeight: el.scrollHeight,
        scrollTop: el.scrollTop,
        clientHeight: el.clientHeight,
        targetScrollTop,
        isAtBottom: Math.abs(el.scrollTop - targetScrollTop) <= 5
      });
    }, 100);
  }, [streamMessages?.length]);

  // === –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ ===
  const handleSearch = useCallback((query) => {
    setSearchQuery(query);
    // –°–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑ –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞
    setTimeout(() => {
      scrollToBottom('smooth');
    }, 100);
  }, [setSearchQuery, scrollToBottom]);

  // === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
  const handleLoadMore = useCallback(async () => {
    if (!activeStreamId || isLoadingMore) return;

    setIsLoadingMore(true);
    try {
      console.log('üì• Loading more messages for stream:', activeStreamId);
      
      const oldestMessageId = getOldestMessageId(activeStreamId);
      if (!oldestMessageId) {
        console.log('‚ùå No oldest message ID found');
        return;
      }
      
      const result = await loadOlderMessages(activeStreamId, oldestMessageId, 20);
      
      if (result.success) {
        console.log(`‚úÖ Loaded ${result.loadedCount} older messages`);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —ç—Ç—É –¥–∞—Ç—É, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        // –ï—Å–ª–∏ –Ω–µ—Ç - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç–µ
        if (!result.hasMore) {
          console.log('üìÖ All messages loaded');
        }
      } else {
        console.error('‚ùå Failed to load older messages:', result.error);
      }
    } catch (error) {
      console.error('‚ùå Error loading more messages:', error);
    } finally {
      setIsLoadingMore(false);
      autoLoadTriggeredRef.current = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    }
  }, [activeStreamId, loadOlderMessages, getOldestMessageId, isLoadingMore]);

  // === –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–ª–ª–∞ ===
  const handleScroll = useCallback((e) => {
    if (!e || !e.target) return;
    
    const target = e.target;
    if (!target || typeof target.scrollTop !== 'number') {
      console.warn('‚ö†Ô∏è Invalid scroll target:', target);
      return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–∫—Ä–æ–ª–ª–∞
    isScrollingRef.current = true;
    
    saveScroll();
    
    const { scrollTop, scrollHeight, clientHeight } = target;
    const nowAtBottom = scrollHeight - scrollTop - clientHeight <= THRESHOLD;
    const scrollPercentage = scrollTop / (scrollHeight - clientHeight);
    
    const wasAtBottom = wasAtBottomRef.current;
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (ENABLE_SCROLL_LOGS) {
      console.log('üìú Scroll event:', {
        scrollTop,
        scrollHeight,
        clientHeight,
        nowAtBottom,
        wasAtBottom,
        scrollPercentage,
        isScrolling: isScrollingRef.current
      });
    }
    
    // –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º wasAtBottomRef –°–†–ê–ó–£ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
    wasAtBottomRef.current = nowAtBottom;
    
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è" (–≤–Ω–∏–∑—É)
    if (wasAtBottom && !nowAtBottom) {
      setShowNewBtn(true);
      if (ENABLE_SCROLL_LOGS) {
        console.log('üîù User scrolled up - showing new messages button');
      }
    } else if (!wasAtBottom && nowAtBottom) {
      // ‚úÖ –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ –≤–Ω–∏–∑
      if (activeStreamId && streamMessages.length > 0) {
        const lastMsg = streamMessages[streamMessages.length - 1];
        markMessagesAsRead(activeStreamId, lastMsg.id);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        setNewMsgCount(0);
        setShowNewBtn(false);
      }
      
      autoLoadTriggeredRef.current = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ –≤–Ω–∏–∑
      if (ENABLE_SCROLL_LOGS) {
        console.log('üîΩ User scrolled to bottom - hiding new messages button');
      }
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ –≤–≤–µ—Ä—Ö
    const oldestMessageId = getOldestMessageId(activeStreamId);
    const now = Date.now();
    const shouldAutoLoad = scrollTop <= 50 && 
                          oldestMessageId && 
                          loadingStrategy?.enablePagination && 
                          !isLoadingMore &&
                          !autoLoadTriggeredRef.current &&
                          oldestMessageId !== lastLoadedMessageIdRef.current && // –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                          (now - lastLoadMoreTimeRef.current) > 2000; // –ú–∏–Ω–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
    
    if (shouldAutoLoad) {
      console.log('üì• Auto-loading older messages on scroll up');
      lastLoadMoreTimeRef.current = now;
      lastLoadedMessageIdRef.current = oldestMessageId; // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      autoLoadTriggeredRef.current = true;
      handleLoadMore();
    }
    
    setIsAtBottom(nowAtBottom);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–∫—Ä–æ–ª–ª–∞ —á–µ—Ä–µ–∑ —É–≤–µ–ª–∏—á–µ–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    setTimeout(() => {
      isScrollingRef.current = false;
      if (ENABLE_SCROLL_LOGS) {
        console.log('‚è∞ Scroll flag reset');
      }
    }, SCROLL_RESET_DELAY);
  }, [activeStreamId, streamMessages, hasMessages, markMessagesAsRead, saveScroll, getOldestMessageId, loadingStrategy]);

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∫—Ä–æ–ª–ª–∞ –≤ streamsStore
  useEffect(() => {
    setScrollFunctions(scrollToFirstUnreadMessage, scrollToFirstUnreadQuestion);
    return () => {
      setScrollFunctions(null, null);
    };
  }, [scrollToFirstUnreadMessage, scrollToFirstUnreadQuestion, setScrollFunctions]);

  // === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ ===
  useEffect(() => {
    if (activeStreamId) {
      setActiveStreamId(activeStreamId);
      
      // –ö–æ–≥–¥–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∏–º - –ø–æ–º–µ—á–∞–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
      const timer = setTimeout(() => {
        const msgs = getStreamMessages(activeStreamId);
        if (msgs.length > 0) {
          const lastMsg = msgs[msgs.length - 1];
          markMessagesAsRead(activeStreamId, lastMsg.id);
          console.log('‚úÖ Marked all messages as read for stream:', activeStreamId);
        }
      }, 300);
      
      return () => clearTimeout(timer);
    }
  }, [activeStreamId, setActiveStreamId, getStreamMessages, markMessagesAsRead]);

  // === –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
  useEffect(() => {
    if (!activeStreamId) return;

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∏–º–∞
    autoLoadTriggeredRef.current = false;
    lastLoadedMessageIdRef.current = null;
    lastLoadMoreTimeRef.current = 0;

    console.log('üîÑ Loading messages for stream:', activeStreamId);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è (loadMessagesAdaptive –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à –µ—Å–ª–∏ –µ—Å—Ç—å)
    // –°–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –ø—Ä–∏—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ WebSocket, —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏—Ç —Å–ø–∏—Å–æ–∫
    loadMessagesAdaptive(activeStreamId).then((result) => {
      if (result.success) {
        console.log(`‚úÖ Loaded messages with ${result.strategy.strategy} strategy (${result.count} new)`);
      } else {
        console.error('‚ùå Failed to load messages adaptively:', result.error);
        // Fallback –∫ –æ–±—ã—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        loadMessagesFromDatabase(activeStreamId, 100);
      }
    });
  }, [activeStreamId, loadMessagesAdaptive, loadMessagesFromDatabase]); // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∞

  // === –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∏–º–∞ ===
  useEffect(() => {
    if (!activeStreamId || !shouldAutoScroll) return;
    
    console.log('üöÄ Auto-scroll triggered for stream:', activeStreamId);
    
    // –ñ–¥–µ–º –¥–æ–ª—å—à–µ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ—á–Ω–æ —É—Å–ø–µ–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
    const timer = setTimeout(() => {
      console.log('üöÄ Executing auto-scroll after delay');
      forceScrollToBottom('instant');
      clearAutoScrollFlag();
    }, 500); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 500ms
    
    return () => clearTimeout(timer);
  }, [activeStreamId, shouldAutoScroll, forceScrollToBottom, clearAutoScrollFlag]);

  // === –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ===
  useEffect(() => {
    if (!activeStreamId || !shouldAutoScroll || !streamMessages?.length) return;
    
    console.log('üöÄ Additional auto-scroll triggered, messages count:', streamMessages.length);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
    const timer = setTimeout(() => {
      console.log('üöÄ Executing additional auto-scroll after messages loaded');
      forceScrollToBottom('instant');
      clearAutoScrollFlag();
    }, 100);
    
    return () => clearTimeout(timer);
  }, [streamMessages?.length, shouldAutoScroll, forceScrollToBottom, clearAutoScrollFlag]);

  // === –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ DOM ===
  useEffect(() => {
    if (!activeStreamId || !shouldAutoScroll) return;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º MutationObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ DOM
    const container = containerRef.current;
    if (!container) return;
    
    const observer = new MutationObserver(() => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞
      if (streamMessages?.length > 0 && container.scrollHeight > container.clientHeight) {
        console.log('üöÄ DOM changed, forcing scroll to bottom');
        forceScrollToBottom('instant');
        clearAutoScrollFlag();
        observer.disconnect(); // –û—Ç–∫–ª—é—á–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
      }
    });
    
    observer.observe(container, {
      childList: true,
      subtree: true,
      characterData: true
    });
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    const timeout = setTimeout(() => {
      observer.disconnect();
    }, 2000);
    
    return () => {
      observer.disconnect();
      clearTimeout(timeout);
    };
  }, [activeStreamId, shouldAutoScroll, streamMessages?.length, forceScrollToBottom, clearAutoScrollFlag]);

  // === –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∏–º–∞ ===
  useEffect(() => {
    if (!activeStreamId) return;
    
    // –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∞, –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
    if (shouldAutoScroll) {
      console.log('üöÄ Skipping position restoration due to auto-scroll flag');
      return;
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const timeoutId = setTimeout(() => {
      const el = containerRef.current;
      if (!el) {
        // Ref can be null on first render - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        return;
      }

    const saved = scrollPositions.current[activeStreamId];
    if (saved !== undefined) {
      el.scrollTop = saved;
    } else {
      el.scrollTop = el.scrollHeight;
    }

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setShowNewBtn(false);
    setNewMsgCount(0);
    
    // –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç—Ä–∏–º–∞
    prevMsgCountRef.current = streamMessages?.length || 0;
    prevStreamRef.current = activeStreamId;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤–Ω–∏–∑—É"
    requestAnimationFrame(() => {
      if (el && typeof el.scrollTop === 'number') {
        const { scrollTop, scrollHeight, clientHeight } = el;
        wasAtBottomRef.current = scrollHeight - scrollTop - clientHeight <= THRESHOLD;
      }
    });
    }, 100); // –ó–∞–¥–µ—Ä–∂–∫–∞ 100ms

    return () => clearTimeout(timeoutId);
  }, [activeStreamId, shouldAutoScroll]);

  // === –†–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ===
  useEffect(() => {
    if (!activeStreamId || !streamMessages) return;

    const el = containerRef.current;
    if (!el) return;

    const newCount = streamMessages.length;
    const oldCount = prevMsgCountRef.current;
    
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –ø—Ä–∏–±–∞–≤–∏–ª–æ—Å—å, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (newCount <= oldCount) {
      prevMsgCountRef.current = newCount;
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–Ω–∏–∑—É
    const wasAtBottom = wasAtBottomRef.current;
    const isScrolling = isScrollingRef.current;
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–Ω–∏–∑—É?
    const currentScrollTop = el.scrollTop;
    const currentScrollHeight = el.scrollHeight;
    const currentClientHeight = el.clientHeight;
    const actuallyAtBottom = currentScrollHeight - currentScrollTop - currentClientHeight <= THRESHOLD;
    
    console.log('üì® New message effect:', {
      newCount,
      oldCount,
      wasAtBottom,
      isScrolling,
      actuallyAtBottom,
      shouldAutoScroll: wasAtBottom && !isScrolling && actuallyAtBottom
    });
    
    // –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º wasAtBottomRef –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    wasAtBottomRef.current = actuallyAtBottom;
    
    // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï —Å–∫—Ä–æ–ª–ª–∏—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ò –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–Ω–∏–∑—É
    if (wasAtBottom && !isScrolling && actuallyAtBottom) {
      // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤–Ω–∏–∑—É –ò –Ω–µ —Å–∫—Ä–æ–ª–ª–∏—Ç –ò –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–Ω–∏–∑—É
      if (ENABLE_SCROLL_LOGS) {
        console.log('üöÄ Auto-scrolling to bottom');
      }
      requestAnimationFrame(() => {
        el.scrollTop = el.scrollHeight;
        wasAtBottomRef.current = true;
        
        // ‚úÖ –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–µ
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Å–∫—Ä–æ–ª–ª –ø—Ä–æ–∏–∑–æ—à–µ–ª
        setTimeout(() => {
          if (activeStreamId && streamMessages.length > 0) {
            const lastMsg = streamMessages[streamMessages.length - 1];
            markMessagesAsRead(activeStreamId, lastMsg.id);
            console.log('‚úÖ Auto-scroll: Marked message as read:', lastMsg.id);
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            setNewMsgCount(0);
            setShowNewBtn(false);
          }
        }, 100);
      });
    } else if (!wasAtBottom || !actuallyAtBottom) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –±—ã–ª –≤–Ω–∏–∑—É
      const stats = getStreamStats(activeStreamId);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
      if (stats.unreadCount > 0) {
        setNewMsgCount(stats.unreadCount);
        setShowNewBtn(true);
      } else {
        setNewMsgCount(0);
        setShowNewBtn(false);
      }
    } else {
      if (ENABLE_SCROLL_LOGS) {
        console.log('‚è∏Ô∏è User is scrolling or not at bottom - not auto-scrolling');
      }
    }

    prevMsgCountRef.current = newCount;
  }, [streamMessages?.length || 0, activeStreamId, getStreamStats, markMessagesAsRead, streamMessages]);


  // === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ scroll ===
  useEffect(() => {
    if (!activeStreamId) {
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = getStreamStats(activeStreamId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞
    const el = containerRef.current;
    const actuallyAtBottom = el ? (el.scrollHeight - el.scrollTop - el.clientHeight <= THRESHOLD) : true;
    
    // –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–Ω–∏–∑—É - —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    if (actuallyAtBottom) {
      setNewMsgCount(0);
      setShowNewBtn(false);
      return;
    }
    
    // –ï—Å–ª–∏ –Ω–µ –≤–Ω–∏–∑—É –ò –µ—Å—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    if (stats.unreadCount > 0) {
      setNewMsgCount(stats.unreadCount);
      setShowNewBtn(true);
    } else {
      setNewMsgCount(0);
      setShowNewBtn(false);
    }
  }, [activeStreamId, getStreamStats, messages.length, isAtBottom, checkIsAtBottom]);

  // === WebSocket Mood Updates ===
  useEffect(() => {
    const handleMoodUpdate = (data) => {
      if (data.type === 'mood_update' && data.data) {
        setCurrentMood(data.data); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ store
        console.log('üé≠ Mood updated:', data.data);
      }
    };
    
    on('mood_update', handleMoodUpdate);
    
    return () => {
      off('mood_update', handleMoodUpdate);
    };
  }, [on, off, setCurrentMood]); // Add setCurrentMood to dependencies

  // === –û—á–∏—Å—Ç–∫–∞ ===
  useEffect(() => {
    return () => {
      if (timeoutRef.current) clearTimeout(timeoutRef.current);
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      clearSearchTimeout();
    };
  }, [clearSearchTimeout]);

  return (
    <div className="chat-container">
      {/* Database Status */}
      {/* DatabaseStatus —É–±—Ä–∞–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ */}

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–≤–µ—Ä—Ö—É) */}
      {isLoadingMore && (
        <div className="chat-container__loading-indicator chat-container__loading-indicator--top">
          <div className="chat-container__loading-spinner">‚è≥</div>
          <span className="chat-container__loading-text">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...</span>
        </div>
      )}

      {/* –í–∏—Ä—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è */}
      <div className="chat-container__messages">
        {hasMessages ? (
          <VirtualizedMessageList
            messages={streamMessages}
            onScroll={handleScroll}
            scrollToBottom={scrollToBottom}
            isAtBottom={isAtBottom}
            showNewMessagesButton={false}
            onNewMessagesClick={() => scrollToBottom('smooth')}
            containerRef={containerRef}
          />
        ) : (
          <div className="chat-container__empty">
            <span className="chat-container__empty-icon">üí¨</span>
            <p>{hasStreams ? t('chat.noMessages') : t('chat.connectStream')}</p>
          </div>
        )}
      </div>


            {/* –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π */}
      {showNewBtn && (
        <div className="chat-container__new-messages-wrapper">
          <button
            className="chat-container__new-messages-btn"
            onClick={() => scrollToBottom('smooth')}
          >
            <span className="chat-container__new-messages-text">
              {newMsgCount} {newMsgCount === 1 ? '–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' : '–Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π'}
            </span>
          </button>
        </div>
      )}

      {/* –ü–æ–∏—Å–∫ */}
      <SearchBar 
        onSearch={handleSearch}
        placeholder={t('search.messages')}
        onAddStream={onAddStream}
      />
    </div>
  );
};

export default ChatContainer;
