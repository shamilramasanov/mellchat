const logger = require('../utils/logger');

class GeminiService {
  constructor() {
    this.apiKey = process.env.GEMINI_API_KEY;
    this.baseUrl = 'https://generativelanguage.googleapis.com/v1beta';
    
    if (!this.apiKey) {
      logger.warn('‚ö†Ô∏è GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. Gemini —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.');
    } else {
      logger.info('‚úÖ Gemini API key configured');
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
   */
  isAvailable() {
    return !!this.apiKey;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
   */
  async getAvailableModels() {
    if (!this.isAvailable()) {
      throw new Error('Gemini API key not configured');
    }

    try {
      const url = `${this.baseUrl}/models`;
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`Gemini API error: ${response.status} - ${errorData.error?.message || 'Unknown error'}`);
      }

      const data = await response.json();
      logger.info('Available Gemini models:', data.models?.length || 0);
      
      return data.models || [];
    } catch (error) {
      logger.error('Failed to get Gemini models:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini API
   */
  async makeRequest(model, prompt, context = [], options = {}) {
    if (!this.isAvailable()) {
      throw new Error('Gemini API key not configured');
    }

    try {
      const url = `${this.baseUrl}/models/${model}:generateContent?key=${this.apiKey}`;
      
      const requestBody = {
        contents: [
          ...context.map(msg => ({
            role: msg.role === 'user' ? 'user' : 'model',
            parts: [{ text: msg.content }]
          })),
          {
            parts: [{ text: prompt }]
          }
        ],
        ...options
      };

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(`Gemini API error: ${response.status} - ${errorData.error?.message || 'Unknown error'}`);
      }

      const data = await response.json();
      
      if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
        throw new Error('Invalid response from Gemini API');
      }

      return data.candidates[0].content.parts[0].text;
    } catch (error) {
      logger.error('Gemini API request failed:', error);
      throw error;
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async analyzeContent(messages) {
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∞–Ω–∞–ª–∏–∑:

1. –û–±—â–∏–µ —Ç—Ä–µ–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π (sentiment trends)
2. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–ø–∞–º–∞
3. –ê–Ω–æ–º–∞–ª–∏–∏ –≤ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
4. –ü—Ä–æ–±–ª–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

–°–æ–æ–±—â–µ–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 50 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞):
${JSON.stringify(messages.slice(0, 50), null, 2)}

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "sentiment": "positive/neutral/negative",
  "spamPatterns": ["pattern1", "pattern2"],
  "anomalies": ["anomaly1", "anomaly2"],
  "contentIssues": ["issue1", "issue2"],
  "recommendations": ["rec1", "rec2"]
}`;

    try {
      const response = await this.makeRequest('gemini-pro', prompt);
      
      // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
      try {
        const jsonMatch = response.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          return JSON.parse(jsonMatch[0]);
        }
      } catch (e) {
        // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        logger.warn('Failed to parse JSON from Gemini response, returning text');
      }
      
      return {
        analysis: response,
        sentiment: 'neutral',
        spamPatterns: [],
        anomalies: [],
        contentIssues: [],
        recommendations: []
      };
    } catch (error) {
      logger.error('Failed to analyze content with Gemini:', error);
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
   */
  async generateReport(metrics, timeRange = '24h') {
    const prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã MellChat –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –º–µ—Ç—Ä–∏–∫:

–í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: ${timeRange}
–ú–µ—Ç—Ä–∏–∫–∏:
${JSON.stringify(metrics, null, 2)}

–í–∫–ª—é—á–∏ –≤ –æ—Ç—á–µ—Ç:
1. –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ –∏—Ö –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
2. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
3. –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

–§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ —á–∏—Ç–∞–µ–º—ã–º.`;

    try {
      const response = await this.makeRequest('gemini-pro', prompt);
      return {
        report: response,
        generatedAt: new Date().toISOString(),
        timeRange
      };
    } catch (error) {
      logger.error('Failed to generate report with Gemini:', error);
      throw error;
    }
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
   */
  async optimizeSystem(systemMetrics) {
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:

${JSON.stringify(systemMetrics, null, 2)}

–í–µ—Ä–Ω–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "recommendations": [
    {
      "title": "–ù–∞–∑–≤–∞–Ω–∏–µ",
      "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
      "priority": "high/medium/low",
      "impact": "–û–∂–∏–¥–∞–µ–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ"
    }
  ],
  "summary": "–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ"
}`;

    try {
      const response = await this.makeRequest('gemini-pro', prompt);
      
      try {
        const jsonMatch = response.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          return JSON.parse(jsonMatch[0]);
        }
      } catch (e) {
        logger.warn('Failed to parse JSON from Gemini optimization response');
      }
      
      return {
        recommendations: [],
        summary: response
      };
    } catch (error) {
      logger.error('Failed to optimize system with Gemini:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–º–æ—â—å –≤ troubleshooting
   */
  async troubleshootIssue(errorLogs, systemState) {
    const prompt = `–ü–æ–º–æ–≥–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É –≤ —Å–∏—Å—Ç–µ–º–µ MellChat:

–õ–æ–≥–∏ –æ—à–∏–±–æ–∫:
${errorLogs.length > 10 ? errorLogs.slice(0, 10).join('\n') : errorLogs.join('\n')}

–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:
${JSON.stringify(systemState, null, 2)}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏:
1. –í–µ—Ä–æ—è—Ç–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–±–ª–µ–º—ã
2. –®–∞–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
3. –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
4. –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ä—ã`;

    try {
      const response = await this.makeRequest('gemini-pro', prompt);
      return {
        diagnosis: response,
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      logger.error('Failed to troubleshoot with Gemini:', error);
      throw error;
    }
  }

  /**
   * –ß–∞—Ç —Å –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–æ–º (–¥–ª—è AI Assistant)
   */
  async chat(message, conversationHistory = []) {
    const context = conversationHistory.slice(-10).map(msg => ({
      role: msg.role || 'user',
      content: msg.content || msg.message || msg.text
    }));

    const prompt = `–¢—ã - AI –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ MellChat, –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ —á–∞—Ç–æ–≤ –¥–ª—è Twitch, YouTube –∏ Kick.

–ü—Ä–∞–≤–∏–ª–∞:
- –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º
- –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö —Å–∏—Å—Ç–µ–º—ã
- –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞ - —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º

–í–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∞: ${message}`;

    try {
      const response = await this.makeRequest('gemini-pro', prompt, context);
      return {
        response: response.trim(),
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      logger.error('Failed to chat with Gemini:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  async getRecommendations(metrics) {
    const prompt = `–ù–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã MellChat, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:

${JSON.stringify(metrics, null, 2)}

–í–µ—Ä–Ω–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –º–∞—Å—Å–∏–≤–∞:
[
  {
    "id": "unique-id",
    "title": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
    "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
    "priority": "high/medium/low",
    "metrics": {"key": "value"},
    "actions": [{"icon": "üîç", "label": "–î–µ–π—Å—Ç–≤–∏–µ"}]
  }
]`;

    try {
      const response = await this.makeRequest('gemini-pro', prompt);
      
      try {
        const jsonMatch = response.match(/\[[\s\S]*\]/);
        if (jsonMatch) {
          return JSON.parse(jsonMatch[0]);
        }
      } catch (e) {
        logger.warn('Failed to parse JSON from Gemini recommendations response');
      }
      
      return [];
    } catch (error) {
      logger.error('Failed to get recommendations from Gemini:', error);
      throw error;
    }
  }
}

module.exports = new GeminiService();

