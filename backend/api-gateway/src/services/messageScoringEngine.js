// Message Scoring Engine - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
const logger = require('../utils/logger');
const userReputationManager = require('./userReputationManager');

class MessageScoringEngine {
  constructor() {
    // –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    this.spamWords = [
      'gg', 'lol', 'omg', 'wtf', 'bro', 'dude', 'yea', 'yeah', 'yep', 'nah',
      'xd', 'lmao', 'w', 'f', 'rip', 'kys', 'ez', 'op', 'nerf', 'buff'
    ];
    
    this.semanticWords = [
      'how', 'what', 'where', 'when', 'why', 'who', 'which', 'can', 'will', 'should',
      'good', 'great', 'nice', 'best', 'love', 'like', 'hate', 'bad', 'worst', 'better',
      'think', 'know', 'see', 'want', 'need', 'help', 'play', 'watch', 'work', 'do',
      '–≤–æ–ø—Ä–æ—Å', '–æ—Ç–≤–µ—Ç', '–ø—Ä–æ–±–ª–µ–º–∞', '—Ä–µ—à–µ–Ω–∏–µ', '–∏–≥—Ä–∞', '—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è', '—Å—Ç—Ä–∏–º', '—á–∞—Ç',
      '–∫–∞–∫', '—á—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∫—Ç–æ', '–∫–∞–∫–æ–π', '–º–æ–≥—É', '–Ω—É–∂–Ω–æ', '–ø–æ–º–æ—â—å'
    ];
  }
  
  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {number} - –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –æ—Ç 0 –¥–æ 1
   */
  calculateSemanticDensity(text) {
    if (!text || text.trim().length === 0) return 0;
    
    const words = text.toLowerCase().split(/\s+/);
    const totalWords = words.length;
    
    if (totalWords === 0) return 0;
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–º—ã—Å–ª–æ–≤—ã–µ —Å–ª–æ–≤–∞
    let semanticCount = 0;
    words.forEach(word => {
      // –£–¥–∞–ª—è–µ–º –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
      const cleanWord = word.replace(/[^\w\u0400-\u04FF]/g, '');
      if (this.semanticWords.includes(cleanWord)) {
        semanticCount++;
      }
    });
    
    // –ü–ª–æ—Ç–Ω–æ—Å—Ç—å = –¥–æ–ª—è —Å–º—ã—Å–ª–æ–≤—ã—Ö —Å–ª–æ–≤
    const density = semanticCount / totalWords;
    
    return Math.min(1, density);
  }
  
  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —à—Ç—Ä–∞—Ñ–Ω—ã–µ –±–∞–ª–ª—ã
   * @param {Object} features - –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {number} - –°—É–º–º–∞—Ä–Ω—ã–π —à—Ç—Ä–∞—Ñ
   */
  calculatePenalties(features) {
    let penalties = 0;
    
    // –®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (>30% –ø–æ–≤—Ç–æ—Ä–æ–≤)
    if (features.repetitionScore > 0.3) {
      penalties += (features.repetitionScore - 0.3) * 20; // –î–æ -14 –±–∞–ª–ª–æ–≤
    }
    
    // –®—Ç—Ä–∞—Ñ –∑–∞ –∏–∑–±—ã—Ç–æ–∫ —ç–º–æ–¥–∑–∏ (>20% —ç–º–æ–¥–∑–∏)
    if (features.emojiRatio > 0.2) {
      penalties += (features.emojiRatio - 0.2) * 30; // –î–æ -24 –±–∞–ª–ª–æ–≤
    }
    
    // –®—Ç—Ä–∞—Ñ –∑–∞ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ CAPS (>50% –∑–∞–≥–ª–∞–≤–Ω—ã—Ö)
    if (features.capsRatio > 0.5 && features.length > 5) {
      penalties += (features.capsRatio - 0.5) * 10; // –î–æ -5 –±–∞–ª–ª–æ–≤
    }
    
    // –®—Ç—Ä–∞—Ñ –∑–∞ —Å–ø–∞–º-—Å–ª–æ–≤–∞ (>30% —Å–ø–∞–º-—Å–ª–æ–≤)
    if (features.spamWordsRatio > 0.3) {
      penalties += (features.spamWordsRatio - 0.3) * 15; // –î–æ -10.5 –±–∞–ª–ª–æ–≤
    }
    
    // –®—Ç—Ä–∞—Ñ –∑–∞ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (<5 —Å–∏–º–≤–æ–ª–æ–≤)
    if (features.length < 5) {
      penalties += (5 - features.length) * 5; // –î–æ -25 –±–∞–ª–ª–æ–≤
    }
    
    return Math.min(50, penalties); // –ú–∞–∫—Å–∏–º—É–º -50 –±–∞–ª–ª–æ–≤
  }
  
  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {Object} message - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {Object} features - –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏–∑ adaptiveSpamDetector)
   * @returns {number} - Message Score (0-100)
   */
  calculateMessageScore(message, features) {
    const text = message.text || message.content || '';
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –ø–ª–æ—Ç–Ω–æ—Å—Ç—å
    const semanticDensity = this.calculateSemanticDensity(text);
    
    // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
    let score = semanticDensity * 40; // –î–æ 40 –±–∞–ª–ª–æ–≤
    
    // –ë–æ–Ω—É—Å –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    score += (1 - features.repetitionScore) * 10; // –î–æ 10 –±–∞–ª–ª–æ–≤
    
    // –ë–æ–Ω—É—Å –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–ø–∞–º-—Å–ª–æ–≤
    score += (1 - features.spamWordsRatio) * 10; // –î–æ 10 –±–∞–ª–ª–æ–≤
    
    // –ë–æ–Ω—É—Å –∑–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ 20 –±–∞–ª–ª–æ–≤)
    if (features.length > 20) {
      score += Math.min(20, (features.length - 20) / 2);
    } else if (features.length < 5 && semanticDensity < 0.2) {
      // –®—Ç—Ä–∞—Ñ –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–µ–æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      score -= 15;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
    const username = message.username || message.sender?.username || 'unknown';
    const reputation = userReputationManager.getReputation(username);
    const filterModifier = userReputationManager.getFilterModifier(username);
    
    // –í—ã—á–∏—Ç–∞–µ–º —à—Ç—Ä–∞—Ñ—ã (—Å —É—á–µ—Ç–æ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏)
    const penalties = this.calculatePenalties(features);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∫ —à—Ç—Ä–∞—Ñ–∞–º
    const adjustedPenalties = penalties / filterModifier;
    score -= adjustedPenalties;
    
    // –î–ª—è –Ω–∞–¥–µ–∂–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å
    if (reputation > 10) {
      score += Math.min(15, reputation * 0.5);
    }
    // –î–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–±–∞–≤–ª—è–µ–º —à—Ç—Ä–∞—Ñ
    else if (reputation < -10) {
      score -= Math.min(15, Math.abs(reputation) * 0.5);
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (0-100)
    const finalScore = Math.max(0, Math.min(100, score));
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –¥–µ–±–∞–≥–∞
    if (finalScore < 25 && features.length > 3) {
      logger.debug('üìä Message scoring:', {
        username,
        text: text.substring(0, 30),
        semanticDensity,
        penalties,
        finalScore,
        reputation,
        classification: finalScore < 25 ? 'spam' : finalScore < 40 ? 'low-quality' : 'quality'
      });
    }
    
    return finalScore;
  }
  
  /**
   * –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @param {number} score - Message Score
   * @returns {string} - 'spam', 'low-quality', 'quality'
   */
  classifyMessage(score) {
    if (score < 25) return 'spam';
    if (score < 40) return 'low-quality';
    return 'quality';
  }
  
  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–∫–∏
   * @param {Object} message - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {number} score - Message Score
   */
  updateUserReputation(message, score) {
    const username = message.username || message.sender?.username || 'unknown';
    userReputationManager.updateReputation(username, score);
  }
}

// Singleton instance
const messageScoringEngine = new MessageScoringEngine();

module.exports = messageScoringEngine;

