// backend/api-gateway/src/services/questionDetector.js
const QUESTION_STARTS = [
  "–∫—Ç–æ","—á—Ç–æ","–≥–¥–µ","–∑–∞—á–µ–º","–ø–æ—á–µ–º—É","–∫–æ–≥–¥–∞","–∫–∞–∫","–º–æ–∂–Ω–æ","–µ—Å—Ç—å –ª–∏","–Ω–µ –¥—É–º–∞–µ—à—å –ª–∏",
  "who","what","where","why","when","how","can","is","are"
];

const QUESTION_PATTERNS = [
  /–º–æ–∂–Ω–æ –ª–∏/i,
  /–∫–∞–∫ (?:–º–Ω–µ|—Ç—ã|–æ–Ω|–æ–Ω–∞|–º—ã|—ç—Ç–æ)/i,
  /—á—Ç–æ –µ—Å–ª–∏/i,
  /–ø–æ—á–µ–º—É/i,
  /–∑–∞—á–µ–º/i,
  /–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è/i,
  /–Ω–µ –∑–Ω–∞–µ—à—å –ª–∏/i,
  /\b(is it|can i|how to|what if|why)\b/i
];

// –≠–º–æ–¥–∑–∏-–≤–æ–ø—Ä–æ—Å—ã
const QUESTION_EMOJIS = ['ü§î', '‚ùì', '‚ÅâÔ∏è', '‚ùî'];

function looksLikeLink(text) {
  return /https?:\/\/|www\.|\.com|\.ru|\.net/.test(text);
}

function isQuestion(text, lastMessages = []) {
  if (!text || typeof text !== 'string') return false;
  const raw = text.trim();
  
  // –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (raw.length < 3 || raw.length > 500) return false;
  
  // –°—Å—ã–ª–∫–∏ ‚Äî –∏—Å–∫–ª—é—á–∞–µ–º
  if (looksLikeLink(raw)) return false;

  const low = raw.toLowerCase();

  // 1) –ü—Ä—è–º–æ–π —Å—Ç–∞—Ä—Ç –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞
  if (QUESTION_STARTS.some(w => low.startsWith(w + ' ') || low === w)) return true;

  // 2) –®–∞–±–ª–æ–Ω—ã
  if (QUESTION_PATTERNS.some(rx => rx.test(raw))) return true;

  // 3) –≠–º–æ–¥–∑–∏-–≤–æ–ø—Ä–æ—Å—ã
  if (QUESTION_EMOJIS.some(emoji => raw.includes(emoji))) return true;

  // 4) –ö–æ—Ä–æ—Ç–∫–∏–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å: –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª–∏–Ω–Ω—ã–µ
  if (/(?:\b–∞\b|\b—Ç–æ\b|\b–∞ –∫–∞–∫\b|\b–µ—â–µ\b|\b–≥–¥–µ\b|\b–∫–∞–∫\b)/i.test(raw) && lastMessages.length) {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º –≤–æ–ø—Ä–æ—Å–æ–º
    const prev = lastMessages[lastMessages.length - 1];
    if (prev && prev.content && prev.content.length > 20) return true;
  }

  // 5) –ù–∞–∫–æ–Ω–µ—Ü ‚Äî –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–æ–Ω—Ü–µ (–µ—Å–ª–∏ –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–µ —Å–ø–∞–º)
  if (raw.endsWith('?')) return true;

  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ Redis –∏–ª–∏ –ø–∞–º—è—Ç–∏)
async function getLastMessagesForUser(userId, limit = 5) {
  // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ Redis
  // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
  return [];
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async function detectQuestion(message) {
  try {
    const { content, userId } = message;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const lastMessages = await getLastMessagesForUser(userId, 5);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–º
    const isQuestionResult = isQuestion(content, lastMessages);
    
    return {
      ...message,
      isQuestion: isQuestionResult
    };
  } catch (error) {
    console.error('Error detecting question:', error);
    return {
      ...message,
      isQuestion: false
    };
  }
}

module.exports = {
  isQuestion,
  detectQuestion,
  getLastMessagesForUser
};
