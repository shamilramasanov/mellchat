// User Reputation Manager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const logger = require('../utils/logger');

class UserReputationManager {
  constructor() {
    // –†–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: username -> score
    this.userReputations = new Map();
    
    // –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–ø—É—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π (–¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏)
    this.reputationHistory = new Map();
    
    // –ü–æ—Ä–æ–≥–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
    this.thresholds = {
      reliable: 10,      // –ù–∞–¥–µ–∂–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      normalMin: -10,    // –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
      normalMax: 10,     // –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
      problematic: -10   // –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    };
    
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.maxHistorySize = 100;
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} username - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {number} - –¢–µ–∫—É—â–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è
   */
  getReputation(username) {
    return this.userReputations.get(username) || 0;
  }
  
  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ Message Score
   * @param {string} username - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} messageScore - –û—Ü–µ–Ω–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {number} - –ù–æ–≤–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è
   */
  updateReputation(username, messageScore) {
    const currentReputation = this.getReputation(username);
    let newReputation = currentReputation;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (messageScore > 40) {
      // –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí +1
      newReputation = currentReputation + 1;
    } else if (messageScore < 25) {
      // –°–ø–∞–º ‚Üí -1
      newReputation = currentReputation - 1;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é
    this.userReputations.set(username, newReputation);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    this.addToHistory(username, {
      messageScore,
      oldReputation: currentReputation,
      newReputation,
      timestamp: Date.now()
    });
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (Math.abs(currentReputation - newReputation) > 0) {
      logger.debug('üìä Reputation updated:', {
        username,
        oldScore: currentReputation,
        newScore: newReputation,
        messageScore
      });
    }
    
    return newReputation;
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
   * @param {string} username - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {number} - –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä (1.0 = —Å—Ç–∞–Ω–¥–∞—Ä—Ç, >1.0 = –º—è–≥—á–µ, <1.0 = —Å—Ç—Ä–æ–∂–µ)
   */
  getFilterModifier(username) {
    const reputation = this.getReputation(username);
    
    if (reputation > this.thresholds.reliable) {
      // –ù–∞–¥–µ–∂–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ñ–∏–ª—å—Ç—Ä –º—è–≥—á–µ (√ó0.7 –∫ –ø–æ—Ä–æ–≥—É —Å–ø–∞–º–∞)
      return 0.7;
    } else if (reputation < this.thresholds.problematic) {
      // –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ñ–∏–ª—å—Ç—Ä —Å—Ç—Ä–æ–∂–µ (√ó1.5 –∫ –ø–æ—Ä–æ–≥—É —Å–ø–∞–º–∞)
      return 1.5;
    } else {
      // –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
      return 1.0;
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} username - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {string} - 'reliable', 'normal', 'problematic'
   */
  getUserStatus(username) {
    const reputation = this.getReputation(username);
    
    if (reputation > this.thresholds.reliable) {
      return 'reliable';
    } else if (reputation < this.thresholds.problematic) {
      return 'problematic';
    } else {
      return 'normal';
    }
  }
  
  /**
   * –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
   * @param {string} username - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} record - –ó–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏
   */
  addToHistory(username, record) {
    if (!this.reputationHistory.has(username)) {
      this.reputationHistory.set(username, []);
    }
    
    const history = this.reputationHistory.get(username);
    history.push(record);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    if (history.length > this.maxHistorySize) {
      history.shift();
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} username - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} limit - –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π
   * @returns {Array} - –ú–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏
   */
  getHistory(username, limit = 10) {
    const history = this.reputationHistory.get(username) || [];
    return history.slice(-limit);
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   * @returns {Object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  getStats() {
    const users = Array.from(this.userReputations.entries());
    
    return {
      totalUsers: users.length,
      reliableUsers: users.filter(([_, score]) => score > this.thresholds.reliable).length,
      normalUsers: users.filter(([_, score]) => 
        score >= this.thresholds.normalMin && score <= this.thresholds.normalMax
      ).length,
      problematicUsers: users.filter(([_, score]) => score < this.thresholds.problematic).length,
      averageReputation: users.length > 0 
        ? users.reduce((sum, [_, score]) => sum + score, 0) / users.length 
        : 0
    };
  }
  
  /**
   * –°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é
   */
  resetReputation(username) {
    this.userReputations.delete(username);
    this.reputationHistory.delete(username);
    logger.info('üîÑ Reputation reset for user:', username);
  }
  
  /**
   * –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é
   */
  resetAll() {
    this.userReputations.clear();
    this.reputationHistory.clear();
    logger.info('üîÑ All reputations reset');
  }
}

// Singleton instance
const userReputationManager = new UserReputationManager();

module.exports = userReputationManager;

