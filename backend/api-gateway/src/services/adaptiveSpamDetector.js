// Adaptive Spam Detection Service - —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ø–∞–º–∞
const logger = require('../utils/logger');

class AdaptiveSpamDetector {
  constructor() {
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    this.messageStats = {
      spam: [],      // –ü—Ä–∏–º–µ—Ä—ã —Å–ø–∞–º–∞
      normal: [],    // –ü—Ä–∏–º–µ—Ä—ã –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      features: {    // –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        spamLength: 0,
        normalLength: 0,
        spamRepetition: 0,
        normalRepetition: 0,
        spamEmojiCount: 0,
        normalEmojiCount: 0,
        spamCapsRatio: 0,
        normalCapsRatio: 0
      }
    };
    
    // –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ø–∞–º–∞ (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ)
    // –ù–ê–ß–ê–õ–¨–ù–´–ô –†–ï–ñ–ò–ú: –û–ß–ï–ù–¨ –°–¢–†–û–ì–ò–ô (—Å–∫—Ä—ã–≤–∞–µ–º –ø–æ—á—Ç–∏ –≤—Å—ë)
    this.thresholds = {
      length: 20,          // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç—Ä–æ–≥–æ!)
      repetition: 0.1,     // –ü–æ—Ä–æ–≥ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤ (—Å—Ç—Ä–æ–≥–æ!)
      emojiRatio: 0.2,     // –î–æ–ª—è —ç–º–æ–¥–∑–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (—Å—Ç—Ä–æ–≥–æ!)
      capsRatio: 0.5,      // –î–æ–ª—è –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ (—Å—Ç—Ä–æ–≥–æ!)
      spamWordsRatio: 0.3  // –î–æ–ª—è —Å–ø–∞–º-—Å–ª–æ–≤ (—Å—Ç—Ä–æ–≥–æ!)
    };
    
    // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
    this.samplesCount = 0;
    this.maxSamples = 1000; // –ú–∞–∫—Å–∏–º—É–º –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
  }
  
  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  extractFeatures(text) {
    if (!text) return null;
    
    const trimmed = text.trim();
    
    return {
      length: trimmed.length,
      wordCount: trimmed.split(/\s+/).length,
      repetitionScore: this.calculateRepetition(trimmed),
      emojiRatio: this.calculateEmojiRatio(trimmed),
      capsRatio: this.calculateCapsRatio(trimmed),
      exclamationRatio: this.calculateExclamationRatio(trimmed),
      spamWordsRatio: this.calculateSpamWordsRatio(trimmed),
      hasUrl: /http/i.test(trimmed),
      digitRatio: (trimmed.match(/\d/g) || []).length / trimmed.length
    };
  }
  
  /**
   * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
   */
  calculateRepetition(text) {
    const matches = text.match(/(.)\1{1,}/g) || [];
    const totalRepetition = matches.reduce((sum, match) => sum + match.length, 0);
    return totalRepetition / text.length;
  }
  
  /**
   * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ–ª—é —ç–º–æ–¥–∑–∏
   */
  calculateEmojiRatio(text) {
    const emojiPattern = /[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/gu;
    const emojiCount = (text.match(emojiPattern) || []).length;
    return emojiCount / text.length;
  }
  
  /**
   * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ–ª—é –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
   */
  calculateCapsRatio(text) {
    const capsCount = (text.match(/[A-Z]/g) || []).length;
    const lettersCount = (text.match(/[A-Za-z]/g) || []).length;
    return lettersCount > 0 ? capsCount / lettersCount : 0;
  }
  
  /**
   * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ–ª—é –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
   */
  calculateExclamationRatio(text) {
    const exclamationCount = (text.match(/[!?]/g) || []).length;
    return exclamationCount / text.length;
  }
  
  /**
   * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ–ª—é —Å–ø–∞–º-—Å–ª–æ–≤
   */
  calculateSpamWordsRatio(text) {
    const spamWords = ['gg', 'lol', 'omg', 'wtf', 'bro', 'dude', 'yea', 'yeah', 'yep', 'nah'];
    const words = text.toLowerCase().split(/\s+/);
    const spamCount = words.filter(w => spamWords.includes(w)).length;
    return words.length > 0 ? spamCount / words.length : 0;
  }
  
  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∞–º–æ–º (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)
   */
  detectSpam(text) {
    const features = this.extractFeatures(text);
    if (!features) return false;
    
    // –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (features.length < 3) return true;
    
    // ‚úÖ –ü–†–û–í–ï–†–ö–ê –ü–û–í–¢–û–†–Ø–Æ–©–ò–•–°–Ø –°–õ–û–í (–Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–ø–∞–º–∞)
    // –ü—Ä–∏–º–µ—Ä: "DinoDance DinoDance DinoDance" = —Å–ø–∞–º
    // –ü—Ä–∏–º–µ—Ä: "evelon1Angry evelon1Angry evelon1Angry" = —Å–ø–∞–º
    const words = text.trim().split(/\s+/);
    if (words.length > 1) {
      const wordCounts = {};
      words.forEach(word => {
        wordCounts[word] = (wordCounts[word] || 0) + 1;
      });
      
      // –ï—Å–ª–∏ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è >= 3 —Ä–∞–∑–∞ - —ç—Ç–æ —Å–ø–∞–º
      const maxRepeat = Math.max(...Object.values(wordCounts));
      if (maxRepeat >= 3 && words.length >= 3) {
        logger.debug('üö´ Spam detected by word repetition:', { text: text.substring(0, 50), maxRepeat, words });
        return true;
      }
      
      // –ï—Å–ª–∏ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–ª–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ (>= 50% –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π) - —Å—Ç—Ä–æ–∂–µ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      const totalRepeats = Object.values(wordCounts).filter(count => count > 1).reduce((sum, count) => sum + count, 0);
      
      // –î–ª—è 3+ —Å–ª–æ–≤: –µ—Å–ª–∏ >= 50% –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
      if (words.length >= 3 && totalRepeats / words.length >= 0.5) {
        logger.debug('üö´ Spam detected by high repetition ratio:', { text: text.substring(0, 50), ratio: totalRepeats / words.length });
        return true;
      }
      
      // –°—Ç—Ä–æ–∂–µ –¥–ª—è 4-7 —Å–ª–æ–≤: –µ—Å–ª–∏ >= 40% –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
      if (words.length >= 4 && words.length <= 7 && totalRepeats / words.length >= 0.4) {
        logger.debug('üö´ Spam detected by moderate repetition ratio:', { text: text.substring(0, 50), ratio: totalRepeats / words.length });
        return true;
      }
    }
    
    // –ù–∞—á–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    let spamScore = 0;
    
    // –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (features.length < this.thresholds.length) {
      spamScore += 2;
    }
    
    // –ú–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    if (features.repetitionScore > this.thresholds.repetition) {
      spamScore += 2;
    }
    
    // –ú–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
    if (features.emojiRatio > this.thresholds.emojiRatio) {
      spamScore += 1;
    }
    
    // –¢–æ–ª—å–∫–æ –∑–∞–≥–ª–∞–≤–Ω—ã–µ
    if (features.capsRatio > this.thresholds.capsRatio && features.length > 5) {
      spamScore += 1;
    }
    
    // –ú–Ω–æ–≥–æ —Å–ø–∞–º-—Å–ª–æ–≤
    if (features.spamWordsRatio > this.thresholds.spamWordsRatio) {
      spamScore += 2;
    }
    
    // –ú–Ω–æ–≥–æ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
    if (features.exclamationRatio > 0.2) {
      spamScore += 1;
    }
    
    // –°–¢–†–û–ì–ò–ô –†–ï–ñ–ò–ú: —Å—á–∏—Ç–∞–µ–º —Å–ø–∞–º–æ–º –ø–æ—á—Ç–∏ –≤—Å—ë
    // –û–±—É—á–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    if (this.samplesCount < this.maxSamples) {
      if (spamScore >= 2) {
        this.addSpamSample(features);
      } else if (spamScore === 0 && features.length >= this.thresholds.length) {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Å–ø–∞–º-–ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        this.addNormalSample(features);
      }
    }
    
    // –°–¢–†–û–ì–ò–ô –†–ï–ñ–ò–ú: –¥–∞–∂–µ 1 –±–∞–ª–ª = —Å–ø–∞–º
    return spamScore >= 1;
  }
  
  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∏–º–µ—Ä —Å–ø–∞–º–∞
   */
  addSpamSample(features) {
    if (this.messageStats.spam.length >= this.maxSamples / 2) {
      this.messageStats.spam.shift(); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π
    }
    
    this.messageStats.spam.push(features);
    this.samplesCount++;
    this.updateThresholds();
  }
  
  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∏–º–µ—Ä –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  addNormalSample(features) {
    if (this.messageStats.normal.length >= this.maxSamples / 2) {
      this.messageStats.normal.shift();
    }
    
    this.messageStats.normal.push(features);
    this.samplesCount++;
    this.updateThresholds();
  }
  
  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Ä–æ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  updateThresholds() {
    const spamCount = this.messageStats.spam.length;
    const normalCount = this.messageStats.normal.length;
    
    if (spamCount === 0 || normalCount === 0) return;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è —Å–ø–∞–º–∞
    this.messageStats.features.spamLength = 
      this.messageStats.spam.reduce((sum, f) => sum + f.length, 0) / spamCount;
    this.messageStats.features.spamRepetition = 
      this.messageStats.spam.reduce((sum, f) => sum + f.repetitionScore, 0) / spamCount;
    this.messageStats.features.spamEmojiRatio = 
      this.messageStats.spam.reduce((sum, f) => sum + f.emojiRatio, 0) / spamCount;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.messageStats.features.normalLength = 
      this.messageStats.normal.reduce((sum, f) => sum + f.length, 0) / normalCount;
    this.messageStats.features.normalRepetition = 
      this.messageStats.normal.reduce((sum, f) => sum + f.repetitionScore, 0) / normalCount;
    
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ—Ä–æ–≥–∏
    // –î–ª–∏–Ω–∞: —Å—Ä–µ–¥–Ω–µ–µ –º–µ–∂–¥—É —Å–ø–∞–º–æ–º –∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º–∏
    this.thresholds.length = Math.max(3, Math.min(
      (this.messageStats.features.spamLength + this.messageStats.features.normalLength) / 2,
      20
    ));
    
    // –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: –º–µ–∂–¥—É —Å–ø–∞–º–æ–º –∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º–∏
    this.thresholds.repetition = Math.max(0.1, Math.min(
      (this.messageStats.features.spamRepetition + this.messageStats.features.normalRepetition) / 2,
      0.5
    ));
    
    if (this.samplesCount % 50 === 0) {
      logger.info('üéì Adaptive spam detector updated:', {
        samples: this.samplesCount,
        spamSamples: spamCount,
        normalSamples: normalCount,
        thresholds: this.thresholds
      });
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  getStats() {
    return {
      samples: this.samplesCount,
      spamSamples: this.messageStats.spam.length,
      normalSamples: this.messageStats.normal.length,
      thresholds: this.thresholds,
      features: this.messageStats.features
    };
  }
  
  /**
   * –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  reset() {
    this.messageStats = { spam: [], normal: [], features: {} };
    this.samplesCount = 0;
    logger.info('üéì Adaptive spam detector reset');
  }
}

// Singleton instance
const adaptiveSpamDetector = new AdaptiveSpamDetector();

module.exports = adaptiveSpamDetector;

