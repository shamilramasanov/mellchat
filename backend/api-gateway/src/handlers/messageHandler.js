const logger = require('../utils/logger');
const databaseService = require('../services/databaseService');
const messageQueueService = require('../services/messageQueueService');
const deviceDetection = require('../utils/deviceDetection');
const sentimentService = require('../services/sentimentService');
const messageScoringEngine = require('../services/messageScoringEngine');
const userReputationManager = require('../services/userReputationManager');

// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—á–µ—Ä–µ–¥—è–º–∏
class MessageHandler {
  constructor() {
    this.messageQueue = [];
    this.processing = false;
    this.batchMode = true; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞—Ç—á–∏–Ω–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.batchSize = 50;
  }

  // –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  async addMessage(message, connectionId, userAgent = '') {
    try {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const normalizedMessage = this.normalizeMessage(message, connectionId);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–º
      const isQuestion = this.detectQuestion(normalizedMessage.text);
      normalizedMessage.isQuestion = isQuestion;
      
      // üéØ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è —Å–ø–∞–º–∞ (–ø–æ–ª—É—á–∞–µ–º features)
      const adaptiveSpamDetector = require('../services/adaptiveSpamDetector');
      const features = adaptiveSpamDetector.extractFeatures(normalizedMessage.text);
      
      // üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (Message Score)
      const messageScore = messageScoringEngine.calculateMessageScore(normalizedMessage, features || {});
      const messageClassification = messageScoringEngine.classifyMessage(messageScore);
      
      // üö´ –°–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∏–∑–∫–∏–º Score —Å—á–∏—Ç–∞–µ–º —Å–ø–∞–º–æ–º
      const isSpam = messageClassification === 'spam';
      normalizedMessage.isSpam = isSpam;
      normalizedMessage.messageScore = messageScore;
      normalizedMessage.messageClassification = messageClassification;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      messageScoringEngine.updateUserReputation(normalizedMessage, messageScore);
      
      // üö´ –°–ø–∞–º –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ sentiment –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
      if (isSpam) {
        logger.debug('üö´ Spam detected (score:', messageScore, '):', normalizedMessage.text.substring(0, 30));
        normalizedMessage.sentiment = 'neutral'; // –°–ø–∞–º—É —Å—Ç–∞–≤–∏–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π sentiment
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è WebSocket, –Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∏ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º –≤ mood
        return normalizedMessage;
      }
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º sentiment —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –ù–ï-—Å–ø–∞–º–∞)
      const sentiment = sentimentService.analyzeSentiment(normalizedMessage);
      sentimentService.updateMood(sentiment);
      normalizedMessage.sentiment = sentiment;
      
      logger.info('üé≠ Message analysis:', { 
        text: normalizedMessage.text.substring(0, 30), 
        sentiment,
        messageScore,
        messageClassification,
        isSpam,
        isQuestion
      });
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const deviceInfo = deviceDetection.detectDevice(userAgent);
      const adaptiveSettings = deviceDetection.getAdaptiveSettings(deviceInfo);
      
      // –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-—Å–ø–∞–º–∞)
      if (this.batchMode && adaptiveSettings.performance !== 'low') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞—Ç—á–∏–Ω–≥ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        messageQueueService.addToBatch(normalizedMessage);
        logger.debug('Message added to batch', { 
          messageId: normalizedMessage.id,
          deviceType: deviceInfo.type,
          performance: deviceInfo.performance
        });
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω–æ—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —Å–ª–∞–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–ª–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await messageQueueService.addMessage(normalizedMessage);
        logger.debug('Message added to single queue', { 
          messageId: normalizedMessage.id,
          deviceType: deviceInfo.type,
          isQuestion
        });
      }
      
      return normalizedMessage;
    } catch (error) {
      logger.error('Error adding message to handler:', error);
      throw error;
    }
  }

  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  normalizeMessage(message, connectionId) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º streamId –∏–∑ connectionId
    const streamId = this.extractStreamId(connectionId);
    
    const normalizedMessage = {
      id: message.id || `${Date.now()}-${Math.random().toString(36).slice(2,8)}`,
      streamId: streamId,
      username: message.username || message.sender?.username || 'unknown',
      text: message.text || message.content || message.message || '',
      platform: message.platform || this.extractPlatform(connectionId),
      timestamp: message.timestamp || Date.now(),
      isQuestion: message.isQuestion || false,
      connectionId: connectionId
    };
    
    logger.debug('normalizeMessage result:', { 
      originalConnectionId: connectionId,
      extractedStreamId: streamId,
      normalizedMessage: {
        id: normalizedMessage.id,
        streamId: normalizedMessage.streamId,
        username: normalizedMessage.username,
        platform: normalizedMessage.platform
      }
    });
    
    return normalizedMessage;
  }

  // –ò–∑–≤–ª–µ—á—å streamId –∏–∑ connectionId
  extractStreamId(connectionId) {
    if (!connectionId) {
      logger.warn('extractStreamId: connectionId is null or undefined');
      return 'unknown';
    }
    
    logger.debug('extractStreamId input:', { connectionId });
    
    // –§–æ—Ä–º–∞—Ç: platform-channel-timestamp
    // –ù–∞–ø—Ä–∏–º–µ—Ä: twitch-dyrachyo-1761486741039
    const parts = connectionId.split('-');
    if (parts.length >= 2) {
      const streamId = `${parts[0]}-${parts[1]}`;
      logger.debug('extractStreamId result:', { connectionId, streamId, parts });
      return streamId;
    }
    
    logger.warn('extractStreamId: invalid connectionId format', { connectionId, parts });
    return connectionId;
  }

  // –ò–∑–≤–ª–µ—á—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏–∑ connectionId
  extractPlatform(connectionId) {
    if (!connectionId) return 'unknown';
    
    const parts = connectionId.split('-');
    return parts[0] || 'unknown';
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –≤—Å–µ—Ö –±–∞—Ç—á–µ–π
  async flushAllBatches() {
    try {
      await messageQueueService.flushAllBatches();
      logger.info('All message batches flushed');
    } catch (error) {
      logger.error('Error flushing batches:', error);
    }
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  setBatchMode(enabled) {
    this.batchMode = enabled;
    logger.info(`Batch mode ${enabled ? 'enabled' : 'disabled'}`);
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞
  setBatchSize(size) {
    this.batchSize = size;
    logger.info(`Batch size set to ${size}`);
  }

  // üéØ –£–º–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è —Å–ø–∞–º–∞
  detectSpam(text) {
    if (!text || typeof text !== 'string') return false;
    
    const trimmed = text.trim();
    let spamScore = 0;
    
    // 1. –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (< 3 —Å–∏–º–≤–æ–ª–æ–≤)
    if (trimmed.length < 3) {
      return true;
    }
    
    // 2. –°–ª–æ–≤–∞—Ä—å –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–ø–∞–º-—Å–ª–æ–≤
    const spamWords = [
      'gg', 'no', 'pls', 'yes', 'ok', 'xd', 'lol', 'lmao', 'omg',
      'w', 'www', 'wtf', 'yup', 'nope', 'wow', 'f', 'rip', 'kys',
      'ez', 'op', 'nerf', 'buff', 'hf', 'gl', 'ty', 'ggs', 'wp',
      'cap', 'sus', 'fr', 'ur', 'u', 'y', 'n', 'r', 'c', 'v',
      'bro', 'dude', 'bruh', 'damn', 'ew', 'oof', 'ugh', 'ahh',
      'nah', 'yea', 'yeah', 'yep', 'naw', 'lmaoo', 'lmaooo',
      'pfft', 'tf', 'ggs', 'keks', 'kekw', 'kek', 'gah', 'sheesh'
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–æ —Ü–µ–ª–∏–∫–æ–º
    if (spamWords.includes(trimmed.toLowerCase())) {
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∞–º-—Å–ª–æ–≤–∞ –≤–Ω—É—Ç—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–∑ —Å–ø–∞–º-—Å–ª–æ–≤)
    const words = trimmed.toLowerCase().split(/\s+/);
    const spamCount = words.filter(w => spamWords.includes(w)).length;
    if (words.length <= 3 && spamCount > 0) {
      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 3 –∏–ª–∏ –º–µ–Ω—å—à–µ —Å–ª–æ–≤ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ - —Å–ø–∞–º
      return true;
    }
    
    // 3. –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã (aaa, www, ???)
    if (/^([a-z?])\1{2,}$/i.test(trimmed)) {
      return true;
    }
    
    // 4. –ú–Ω–æ–≥–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–¥—Ä—è–¥ (> 5)
    if (/(.)\1{5,}/i.test(trimmed)) {
      spamScore += 2;
    }
    
    // 5. –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ–¥–∑–∏ (> 5 —ç–º–æ–¥–∑–∏)
    const emojiMatch = trimmed.match(/[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/gu);
    if (emojiMatch && emojiMatch.length > 5) {
      spamScore += 1;
    }
    
    // 6. –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö/–≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ (> 3)
    const exclamations = (trimmed.match(/[!?]/g) || []).length;
    if (exclamations > 3) {
      spamScore += 1;
    }
    
    // 7. –¢–æ–ª—å–∫–æ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã (–∫—Ä–∏—á–∞—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
    if (trimmed === trimmed.toUpperCase() && trimmed.length > 5 && /[A-Z]/.test(trimmed)) {
      spamScore += 1;
    }
    
    // 8. –ë–æ–ª—å—à–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–ª–æ–≤
    const words2 = trimmed.toLowerCase().split(/\s+/);
    const uniqueWords = new Set(words2);
    if (words2.length > 3 && uniqueWords.size / words2.length < 0.5) {
      spamScore += 1;
    }
    
    // –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: spamScore >= 1
    return spamScore >= 1;
  }
  
  // –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
  detectQuestion(text) {
    if (!text || typeof text !== 'string') return false;
    
    const questionWords = [
      '–∫–∞–∫', '—á—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–∫—Ç–æ', '—á–µ–π', '–∫–æ—Ç–æ—Ä—ã–π',
      'how', 'what', 'where', 'when', 'why', 'who', 'which'
    ];
    
    const questionMarks = ['?', 'Ôºü'];
    
    const lowerText = text.toLowerCase().trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
    if (questionMarks.some(mark => text.includes(mark))) {
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –Ω–∞—á–∞–ª–µ
    if (questionWords.some(word => lowerText.startsWith(word + ' '))) {
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
    if (questionWords.some(word => lowerText.includes(' ' + word + ' '))) {
      return true;
    }
    
    return false;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
  async getStats() {
    try {
      const queueStats = await messageQueueService.getQueueStats();
      return {
        batchMode: this.batchMode,
        batchSize: this.batchSize,
        queues: queueStats,
        deviceDetection: deviceDetection.getCacheStats()
      };
    } catch (error) {
      logger.error('Error getting handler stats:', error);
      return {
        batchMode: this.batchMode,
        batchSize: this.batchSize,
        error: error.message
      };
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const messageHandler = new MessageHandler();

module.exports = messageHandler;