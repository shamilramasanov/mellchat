// Dashboard –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
import React, { useState, useEffect, memo } from 'react';
import performanceLogger from '../utils/performanceLogger';
import { useDeviceDetection } from '../hooks/useDeviceDetection';
import './PerformanceDashboard.css';

const PerformanceDashboard = () => {
  console.log('üîß PerformanceDashboard rendering...');
  
  const [isVisible, setIsVisible] = useState(false);
  const [stats, setStats] = useState(null);
  const [logs, setLogs] = useState([]);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö—É–∫
  const { adaptiveSettings, toggleVirtualization } = useDeviceDetection();

  useEffect(() => {
    console.log('üöÄ PerformanceDashboard mounted');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    const interval = setInterval(() => {
      setStats(performanceLogger.getStats());
      setLogs(performanceLogger.logs.slice(-10)); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ª–æ–≥–æ–≤
    }, 2000);

    return () => clearInterval(interval);
  }, []);

  const toggleVisibility = () => {
    setIsVisible(!isVisible);
  };

  const clearLogs = () => {
    performanceLogger.logs = [];
    setLogs([]);
  };

  const exportLogs = () => {
    const data = performanceLogger.exportLogs();
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `mellchat-performance-${Date.now()}.json`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const toggleVirtualizationHandler = () => {
    if (!adaptiveSettings || !adaptiveSettings.virtualScroll) {
      console.error('‚ùå Cannot get adaptive settings');
      return;
    }
    
    const newEnabled = !adaptiveSettings.virtualScroll.enabled;
    toggleVirtualization(newEnabled);
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    setTimeout(() => {
      window.location.reload();
    }, 500);
  };

  if (!isVisible) {
    return (
      <div className="performance-dashboard-toggle">
        <button 
          onClick={() => {
            console.log('üìä Performance Dashboard button clicked');
            toggleVisibility();
          }}
          className="performance-toggle-btn"
          title="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
        >
          üìä
        </button>
        {/* –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div style={{
          position: 'fixed',
          top: '80px',
          right: '20px',
          background: 'rgba(0,0,0,0.8)',
          color: 'white',
          padding: '10px',
          borderRadius: '5px',
          fontSize: '12px',
          zIndex: 10000
        }}>
          Dashboard Button Active
        </div>
      </div>
    );
  }

  return (
    <div className="performance-dashboard">
      <div className="performance-dashboard-header">
        <h3>üöÄ MellChat Performance Monitor</h3>
        <div className="performance-controls">
          <button onClick={clearLogs} className="performance-btn">–û—á–∏—Å—Ç–∏—Ç—å</button>
          <button onClick={exportLogs} className="performance-btn">–≠–∫—Å–ø–æ—Ä—Ç</button>
          <button onClick={toggleVirtualizationHandler} className="performance-btn virtualization-toggle">
            {adaptiveSettings?.virtualScroll?.enabled ? 'üîß –í—ã–∫–ª—é—á–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—é' : '‚ö° –í–∫–ª—é—á–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—é'}
          </button>
          <button onClick={toggleVisibility} className="performance-btn">‚úï</button>
        </div>
      </div>

      <div className="performance-metrics">
        <div className="metric-card">
          <h4>üéØ –í–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è</h4>
          <div className="metric-value">
            {stats?.metrics.virtualization.enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω–∞' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞'}
          </div>
          <div className="metric-details">
            –†–µ–Ω–¥–µ—Ä: {stats?.metrics.virtualization.renderedItems || 0}/{stats?.metrics.virtualization.totalItems || 0}
          </div>
          <div className="metric-details">
            –í—Ä–µ–º—è: {stats?.metrics.virtualization.renderTime || 0}ms
          </div>
        </div>

        <div className="metric-card">
          <h4>üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</h4>
          <div className="metric-value">
            {stats?.metrics.deviceDetection.deviceType || 'unknown'}
          </div>
          <div className="metric-details">
            –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats?.metrics.deviceDetection.performance || 'unknown'}
          </div>
          <div className="metric-details">
            –í–∏—Ä—Ç. —Å–∫—Ä–æ–ª–ª: {stats?.metrics.deviceDetection.adaptiveSettings?.virtualScroll?.enabled ? 'ON' : 'OFF'}
          </div>
        </div>

        <div className="metric-card">
          <h4>üíæ –ö—ç—à</h4>
          <div className="metric-value">
            Hit Rate: {stats?.metrics.cache.hitRate?.toFixed(1) || 0}%
          </div>
          <div className="metric-details">
            Hits: {stats?.metrics.cache.hits || 0} | Misses: {stats?.metrics.cache.misses || 0}
          </div>
          <div className="metric-details">
            –†–∞–∑–º–µ—Ä: {stats?.metrics.cache.size || 0}
          </div>
        </div>

        <div className="metric-card">
          <h4>üìú –°–∫—Ä–æ–ª–ª</h4>
          <div className="metric-value">
            Debounce Rate: {stats?.metrics.scroll.debounceRate?.toFixed(1) || 0}%
          </div>
          <div className="metric-details">
            –°–æ–±—ã—Ç–∏—è: {stats?.metrics.scroll.debouncedEvents || 0}/{stats?.metrics.scroll.totalEvents || 0}
          </div>
        </div>

        <div className="metric-card">
          <h4>üöÄ Prefetching</h4>
          <div className="metric-value">
            –°—Ç—Ä–∞–Ω–∏—Ü: {stats?.metrics.prefetching.prefetchedPages || 0}
          </div>
          <div className="metric-details">
            Cache Hits: {stats?.metrics.prefetching.cacheHits || 0}
          </div>
        </div>

        <div className="metric-card">
          <h4>üìà –û–±—â–µ–µ</h4>
          <div className="metric-value">
            –õ–æ–≥–æ–≤: {stats?.totalLogs || 0}
          </div>
          <div className="metric-details">
            –°—Ç–∞—Ç—É—Å: {stats?.enabled ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}
          </div>
        </div>
      </div>

      <div className="performance-logs">
        <h4>üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏</h4>
        <div className="logs-container">
          {logs.map((log, index) => (
            <div key={index} className={`log-entry log-${log.type}`}>
              <span className="log-time">
                {new Date(log.timestamp).toLocaleTimeString()}
              </span>
              <span className="log-type">[{log.type}]</span>
              <span className="log-message">
                {log.type === 'virtualization' && 
                  `${log.data.enabled ? 'ENABLED' : 'DISABLED'} | ${log.data.renderedItems}/${log.data.totalItems} | ${log.data.renderTime}ms`
                }
                {log.type === 'deviceDetection' && 
                  `${log.data.deviceType} | ${log.data.performance} | Virtual: ${log.data.adaptiveSettings?.virtualScroll?.enabled ? 'ON' : 'OFF'}`
                }
                {log.type === 'cache' && 
                  `Hits: ${log.data.hits} | Misses: ${log.data.misses} | Rate: ${log.data.hitRate?.toFixed(1)}%`
                }
                {log.type === 'scroll' && 
                  `Debounced: ${log.data.debouncedEvents}/${log.data.totalEvents} | Rate: ${log.data.debounceRate?.toFixed(1)}%`
                }
                {log.type === 'prefetching' && 
                  `Pages: ${log.data.prefetchedPages} | Cache Hits: ${log.data.cacheHits}`
                }
                {log.type === 'performance' && 
                  `${log.data.component}.${log.data.action}: ${log.data.duration}ms`
                }
              </span>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default memo(PerformanceDashboard, (prevProps, nextProps) => {
  // –†–µ–Ω–¥–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –≤–∞–∂–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  // –ü–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∞—Å –Ω–µ—Ç props, –≤—Å–µ–≥–¥–∞ —Ä–µ–Ω–¥–µ—Ä–∏–º
  return false; // –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º, –Ω–æ —Å memo —ç—Ç–æ –±—É–¥–µ—Ç —Ä–µ–∂–µ
});
